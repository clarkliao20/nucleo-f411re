
nucleo-f411re-local.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800618c  0800618c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006194  08006194  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800619c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c2c  20000060  080061fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c8c  080061fc  00024c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187c9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f0  00000000  00000000  0003889c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fcc  00000000  00000000  0003d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003316  00000000  00000000  0003e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016311  00000000  00000000  000414c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000984d6  00000000  00000000  000577d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058c4  00000000  00000000  000efcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f5570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060d0 	.word	0x080060d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080060d0 	.word	0x080060d0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fbc9 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f83b 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f941 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f915 	bl	800071c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004f2:	f000 f89d 	bl	8000630 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f6:	f002 fe61 	bl	80031bc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink01 */
  Blink01Handle = osThreadNew(StartBlink01, NULL, &Blink01_attributes);
 80004fa:	4a10      	ldr	r2, [pc, #64]	; (800053c <main+0x60>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4810      	ldr	r0, [pc, #64]	; (8000540 <main+0x64>)
 8000500:	f002 fea6 	bl	8003250 <osThreadNew>
 8000504:	4603      	mov	r3, r0
 8000506:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <main+0x68>)
 8000508:	6013      	str	r3, [r2, #0]

  /* creation of Servo00 */
  int degree = 1500;
 800050a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800050e:	607b      	str	r3, [r7, #4]
  Servo00Handle = osThreadNew(Servo00_Control, (void*) degree, &Servo00_attributes);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <main+0x6c>)
 8000514:	4619      	mov	r1, r3
 8000516:	480d      	ldr	r0, [pc, #52]	; (800054c <main+0x70>)
 8000518:	f002 fe9a 	bl	8003250 <osThreadNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <main+0x74>)
 8000520:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000522:	2108      	movs	r1, #8
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <main+0x78>)
 8000526:	f001 fc95 	bl	8001e54 <HAL_TIM_PWM_Start>
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Button01 */
  Button01Handle = osEventFlagsNew(&Button01_attributes);
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x7c>)
 800052c:	f002 ff5e 	bl	80033ec <osEventFlagsNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <main+0x80>)
 8000534:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000536:	f002 fe65 	bl	8003204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x5e>
 800053c:	0800611c 	.word	0x0800611c
 8000540:	08000885 	.word	0x08000885
 8000544:	2000010c 	.word	0x2000010c
 8000548:	08006140 	.word	0x08006140
 800054c:	080008c5 	.word	0x080008c5
 8000550:	20000110 	.word	0x20000110
 8000554:	2000007c 	.word	0x2000007c
 8000558:	08006164 	.word	0x08006164
 800055c:	20000114 	.word	0x20000114

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fcc4 	bl	8005efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <SystemClock_Config+0xc8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <SystemClock_Config+0xc8>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <SystemClock_Config+0xc8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <SystemClock_Config+0xcc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a20      	ldr	r2, [pc, #128]	; (800062c <SystemClock_Config+0xcc>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <SystemClock_Config+0xcc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d4:	2348      	movs	r3, #72	; 0x48
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fe5f 	bl	80012a8 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f998 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f8c1 	bl	8001798 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800061c:	f000 f982 	bl	8000924 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08e      	sub	sp, #56	; 0x38
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
 800065e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <MX_TIM2_Init+0xe8>)
 8000662:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_TIM2_Init+0xe8>)
 800066a:	2247      	movs	r2, #71	; 0x47
 800066c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <MX_TIM2_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_TIM2_Init+0xe8>)
 8000676:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800067a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_TIM2_Init+0xe8>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000682:	4b25      	ldr	r3, [pc, #148]	; (8000718 <MX_TIM2_Init+0xe8>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000688:	4823      	ldr	r0, [pc, #140]	; (8000718 <MX_TIM2_Init+0xe8>)
 800068a:	f001 fad7 	bl	8001c3c <HAL_TIM_Base_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000694:	f000 f946 	bl	8000924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800069e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a2:	4619      	mov	r1, r3
 80006a4:	481c      	ldr	r0, [pc, #112]	; (8000718 <MX_TIM2_Init+0xe8>)
 80006a6:	f001 fe37 	bl	8002318 <HAL_TIM_ConfigClockSource>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006b0:	f000 f938 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b4:	4818      	ldr	r0, [pc, #96]	; (8000718 <MX_TIM2_Init+0xe8>)
 80006b6:	f001 fb73 	bl	8001da0 <HAL_TIM_PWM_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006c0:	f000 f930 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4619      	mov	r1, r3
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_TIM2_Init+0xe8>)
 80006d4:	f002 f9e8 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006de:	f000 f921 	bl	8000924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e2:	2360      	movs	r3, #96	; 0x60
 80006e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80006e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2208      	movs	r2, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	; (8000718 <MX_TIM2_Init+0xe8>)
 80006fc:	f001 fd4a 	bl	8002194 <HAL_TIM_PWM_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000706:	f000 f90d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <MX_TIM2_Init+0xe8>)
 800070c:	f000 f95c 	bl	80009c8 <HAL_TIM_MspPostInit>

}
 8000710:	bf00      	nop
 8000712:	3738      	adds	r7, #56	; 0x38
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000007c 	.word	0x2000007c

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f002 fa2a 	bl	8002bac <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f8e1 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000c4 	.word	0x200000c4
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_GPIO_Init+0x104>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a39      	ldr	r2, [pc, #228]	; (8000874 <MX_GPIO_Init+0x104>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_GPIO_Init+0x104>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <MX_GPIO_Init+0x104>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a32      	ldr	r2, [pc, #200]	; (8000874 <MX_GPIO_Init+0x104>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_GPIO_Init+0x104>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <MX_GPIO_Init+0x104>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2b      	ldr	r2, [pc, #172]	; (8000874 <MX_GPIO_Init+0x104>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_GPIO_Init+0x104>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <MX_GPIO_Init+0x104>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a24      	ldr	r2, [pc, #144]	; (8000874 <MX_GPIO_Init+0x104>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_GPIO_Init+0x104>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	481f      	ldr	r0, [pc, #124]	; (8000878 <MX_GPIO_Init+0x108>)
 80007fc:	f000 fd20 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000806:	481c      	ldr	r0, [pc, #112]	; (8000878 <MX_GPIO_Init+0x108>)
 8000808:	f000 fd1a 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	481a      	ldr	r0, [pc, #104]	; (800087c <MX_GPIO_Init+0x10c>)
 8000812:	f000 fd15 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4814      	ldr	r0, [pc, #80]	; (8000880 <MX_GPIO_Init+0x110>)
 800082e:	f000 fb6b 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA15 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_15;
 8000832:	f248 0320 	movw	r3, #32800	; 0x8020
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x108>)
 800084c:	f000 fb5c 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x10c>)
 8000868:	f000 fb4e 	bl	8000f08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400
 8000880:	40020800 	.word	0x40020800

08000884 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800088c:	2120      	movs	r1, #32
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <StartBlink01+0x34>)
 8000890:	f000 fcef 	bl	8001272 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000898:	f002 fd8d 	bl	80033b6 <osDelay>
    if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <StartBlink01+0x38>)
 80008a2:	f000 fcb5 	bl	8001210 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1ef      	bne.n	800088c <StartBlink01+0x8>
    {
    	osThreadSuspend(Blink01Handle);
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <StartBlink01+0x3c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fd5f 	bl	8003374 <osThreadSuspend>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008b6:	e7e9      	b.n	800088c <StartBlink01+0x8>
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020800 	.word	0x40020800
 80008c0:	2000010c 	.word	0x2000010c

080008c4 <Servo00_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Servo00_Control */
void Servo00_Control(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Servo00_Control */
	int *degree;
	degree = (int*) argument;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, degree);
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <Servo00_Control+0x38>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(2000);
 80008d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008dc:	f000 fa0e 	bl	8000cfc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 500);
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <Servo00_Control+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008e8:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(2000);
 80008ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ee:	f000 fa05 	bl	8000cfc <HAL_Delay>
    osDelay(4000);
 80008f2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008f6:	f002 fd5e 	bl	80033b6 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, degree);
 80008fa:	e7e9      	b.n	80008d0 <Servo00_Control+0xc>
 80008fc:	2000007c 	.word	0x2000007c

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 f9d3 	bl	8000cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40000400 	.word	0x40000400

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_MspInit+0x54>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_MspInit+0x54>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_MspInit+0x54>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_MspInit+0x54>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	f06f 0001 	mvn.w	r0, #1
 8000976:	f000 fa9d 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000998:	d10d      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_TIM_Base_MspInit+0x3c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_TIM_Base_MspInit+0x3c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_TIM_Base_MspInit+0x3c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e8:	d11e      	bne.n	8000a28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_TIM_MspPostInit+0x68>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_TIM_MspPostInit+0x68>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_TIM_MspPostInit+0x68>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <HAL_TIM_MspPostInit+0x6c>)
 8000a24:	f000 fa70 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a92:	230c      	movs	r3, #12
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000aae:	f000 fa2b 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b33      	ldr	r3, [pc, #204]	; (8000bac <HAL_InitTick+0xe4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a32      	ldr	r2, [pc, #200]	; (8000bac <HAL_InitTick+0xe4>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <HAL_InitTick+0xe4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af4:	f107 0210 	add.w	r2, r7, #16
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f86a 	bl	8001bd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d103      	bne.n	8000b16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b0e:	f001 f83b 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8000b12:	6378      	str	r0, [r7, #52]	; 0x34
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b16:	f001 f837 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <HAL_InitTick+0xe8>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0c9b      	lsrs	r3, r3, #18
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <HAL_InitTick+0xf0>)
 8000b32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b40:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000b54:	4817      	ldr	r0, [pc, #92]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b56:	f001 f871 	bl	8001c3c <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d11b      	bne.n	8000ba0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <HAL_InitTick+0xec>)
 8000b6a:	f001 f8b7 	bl	8001cdc <HAL_TIM_Base_Start_IT>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d111      	bne.n	8000ba0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b7c:	201d      	movs	r0, #29
 8000b7e:	f000 f9b5 	bl	8000eec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d808      	bhi.n	8000b9a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	201d      	movs	r0, #29
 8000b8e:	f000 f991 	bl	8000eb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_InitTick+0xf4>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e002      	b.n	8000ba0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3738      	adds	r7, #56	; 0x38
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	431bde83 	.word	0x431bde83
 8000bb4:	20000118 	.word	0x20000118
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM3_IRQHandler+0x10>)
 8000bf2:	f001 f9df 	bl	8001fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000118 	.word	0x20000118

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f005 f9b1 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc41 	bl	80004dc <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c68:	0800619c 	.word	0x0800619c
  ldr r2, =_sbss
 8000c6c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c70:	20004c8c 	.word	0x20004c8c

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f8fc 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	200f      	movs	r0, #15
 8000ca8:	f7ff ff0e 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fe40 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000160 	.word	0x20000160

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000160 	.word	0x20000160

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff61 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb1 	bl	8000e38 <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff80 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff54 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e159      	b.n	80011d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f040 8148 	bne.w	80011d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d005      	beq.n	8000f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d130      	bne.n	8000fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d017      	beq.n	8000ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80a2 	beq.w	80011d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a56      	ldr	r2, [pc, #344]	; (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_GPIO_Init+0x2e8>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010aa:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x2ec>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a49      	ldr	r2, [pc, #292]	; (80011f8 <HAL_GPIO_Init+0x2f0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x202>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a48      	ldr	r2, [pc, #288]	; (80011fc <HAL_GPIO_Init+0x2f4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x1fe>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a47      	ldr	r2, [pc, #284]	; (8001200 <HAL_GPIO_Init+0x2f8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x1fa>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a46      	ldr	r2, [pc, #280]	; (8001204 <HAL_GPIO_Init+0x2fc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x1f6>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a45      	ldr	r2, [pc, #276]	; (8001208 <HAL_GPIO_Init+0x300>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x1f2>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x204>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x204>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x204>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x204>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x204>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <HAL_GPIO_Init+0x2ec>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_GPIO_Init+0x304>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114e:	4a2f      	ldr	r2, [pc, #188]	; (800120c <HAL_GPIO_Init+0x304>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_GPIO_Init+0x304>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001178:	4a24      	ldr	r2, [pc, #144]	; (800120c <HAL_GPIO_Init+0x304>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_GPIO_Init+0x304>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a2:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_GPIO_Init+0x304>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_GPIO_Init+0x304>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_GPIO_Init+0x304>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f aea2 	bls.w	8000f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
 800124c:	4613      	mov	r3, r2
 800124e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800125c:	e003      	b.n	8001266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800125e:	887b      	ldrh	r3, [r7, #2]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001284:	887a      	ldrh	r2, [r7, #2]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	041a      	lsls	r2, r3, #16
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43d9      	mvns	r1, r3
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	400b      	ands	r3, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	619a      	str	r2, [r3, #24]
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e267      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d075      	beq.n	80013b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c6:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d00c      	beq.n	80012ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d2:	4b85      	ldr	r3, [pc, #532]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d112      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012de:	4b82      	ldr	r3, [pc, #520]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ea:	d10b      	bne.n	8001304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b7e      	ldr	r3, [pc, #504]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d05b      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d157      	bne.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e242      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x74>
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a75      	ldr	r2, [pc, #468]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b70      	ldr	r3, [pc, #448]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a6f      	ldr	r2, [pc, #444]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6c      	ldr	r2, [pc, #432]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xb0>
 8001340:	4b69      	ldr	r3, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a68      	ldr	r2, [pc, #416]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b66      	ldr	r3, [pc, #408]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a65      	ldr	r2, [pc, #404]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fcc0 	bl	8000ce4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fcbc 	bl	8000ce4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e207      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xc0>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcac 	bl	8000ce4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fca8 	bl	8000ce4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1f3      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013be:	4b4a      	ldr	r3, [pc, #296]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c7      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_RCC_OscConfig+0x244>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fc61 	bl	8000ce4 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fc5d 	bl	8000ce4 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a8      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4925      	ldr	r1, [pc, #148]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x244>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc40 	bl	8000ce4 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fc3c 	bl	8000ce4 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e187      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d036      	beq.n	8001500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d016      	beq.n	80014c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_RCC_OscConfig+0x248>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a0:	f7ff fc20 	bl	8000ce4 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc1c 	bl	8000ce4 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e167      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x240>)
 80014bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x200>
 80014c6:	e01b      	b.n	8001500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_OscConfig+0x248>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fc09 	bl	8000ce4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	e00e      	b.n	80014f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc05 	bl	8000ce4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d907      	bls.n	80014f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e150      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000
 80014f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ea      	bne.n	80014d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8097 	beq.w	800163c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a7c      	ldr	r2, [pc, #496]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b77      	ldr	r3, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x474>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b74      	ldr	r3, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x474>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x474>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fbc5 	bl	8000ce4 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fbc1 	bl	8000ce4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e10c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x474>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x2ea>
 8001584:	4b64      	ldr	r3, [pc, #400]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a63      	ldr	r2, [pc, #396]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x30c>
 800159a:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a5e      	ldr	r2, [pc, #376]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
 80015a6:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a5b      	ldr	r2, [pc, #364]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x324>
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a57      	ldr	r2, [pc, #348]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	4b55      	ldr	r3, [pc, #340]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a54      	ldr	r2, [pc, #336]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d015      	beq.n	8001600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb86 	bl	8000ce4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff fb82 	bl	8000ce4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0cb      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ee      	beq.n	80015dc <HAL_RCC_OscConfig+0x334>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fb70 	bl	8000ce4 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fb6c 	bl	8000ce4 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0b5      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ee      	bne.n	8001608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d105      	bne.n	800163c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001630:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a38      	ldr	r2, [pc, #224]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a1 	beq.w	8001788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001646:	4b34      	ldr	r3, [pc, #208]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d05c      	beq.n	800170c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d141      	bne.n	80016de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb40 	bl	8000ce4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fb3c 	bl	8000ce4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e087      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	3b01      	subs	r3, #1
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	491b      	ldr	r1, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x478>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb15 	bl	8000ce4 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff fb11 	bl	8000ce4 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e05c      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x416>
 80016dc:	e054      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_RCC_OscConfig+0x478>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fafe 	bl	8000ce4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fafa 	bl	8000ce4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e045      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x470>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x444>
 800170a:	e03d      	b.n	8001788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e038      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x4ec>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d028      	beq.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d121      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d11a      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800175a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	4293      	cmp	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	085b      	lsrs	r3, r3, #1
 800176c:	3b01      	subs	r3, #1
 800176e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d107      	bne.n	8001784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fa2c 	bl	8000ce4 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff fa28 	bl	8000ce4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8c2 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	08006174 	.word	0x08006174
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b094      	sub	sp, #80	; 0x50
 800196a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001974:	2300      	movs	r3, #0
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800197c:	4b79      	ldr	r3, [pc, #484]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d00d      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001988:	2b08      	cmp	r3, #8
 800198a:	f200 80e1 	bhi.w	8001b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x34>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d003      	beq.n	800199e <HAL_RCC_GetSysClockFreq+0x3a>
 8001996:	e0db      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800199c:	e0db      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199e:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a2:	e0d8      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	2200      	movs	r2, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
 80019d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019d6:	4622      	mov	r2, r4
 80019d8:	462b      	mov	r3, r5
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e8:	0150      	lsls	r0, r2, #5
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	6139      	str	r1, [r7, #16]
 80019f4:	4629      	mov	r1, r5
 80019f6:	eb63 0301 	sbc.w	r3, r3, r1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a08:	4659      	mov	r1, fp
 8001a0a:	018b      	lsls	r3, r1, #6
 8001a0c:	4651      	mov	r1, sl
 8001a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a12:	4651      	mov	r1, sl
 8001a14:	018a      	lsls	r2, r1, #6
 8001a16:	4651      	mov	r1, sl
 8001a18:	ebb2 0801 	subs.w	r8, r2, r1
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a36:	4690      	mov	r8, r2
 8001a38:	4699      	mov	r9, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	eb18 0303 	adds.w	r3, r8, r3
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	462b      	mov	r3, r5
 8001a44:	eb49 0303 	adc.w	r3, r9, r3
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a56:	4629      	mov	r1, r5
 8001a58:	024b      	lsls	r3, r1, #9
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a60:	4621      	mov	r1, r4
 8001a62:	024a      	lsls	r2, r1, #9
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a74:	f7fe fbb4 	bl	80001e0 <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a80:	e058      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	099b      	lsrs	r3, r3, #6
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a9c:	4642      	mov	r2, r8
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	0159      	lsls	r1, r3, #5
 8001aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aae:	0150      	lsls	r0, r2, #5
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aba:	4649      	mov	r1, r9
 8001abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	00eb      	lsls	r3, r5, #3
 8001ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aea:	00e2      	lsls	r2, r4, #3
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	4643      	mov	r3, r8
 8001af2:	18e3      	adds	r3, r4, r3
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	464b      	mov	r3, r9
 8001af8:	eb45 0303 	adc.w	r3, r5, r3
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	028b      	lsls	r3, r1, #10
 8001b0e:	4621      	mov	r1, r4
 8001b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b14:	4621      	mov	r1, r4
 8001b16:	028a      	lsls	r2, r1, #10
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	61fa      	str	r2, [r7, #28]
 8001b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b28:	f7fe fb5a 	bl	80001e0 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3750      	adds	r7, #80	; 0x50
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	007a1200 	.word	0x007a1200

08001b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4903      	ldr	r1, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08006184 	.word	0x08006184

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffdc 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0b5b      	lsrs	r3, r3, #13
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4903      	ldr	r1, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08006184 	.word	0x08006184

08001bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	220f      	movs	r2, #15
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_RCC_GetClockConfig+0x60>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0207 	and.w	r2, r3, #7
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e041      	b.n	8001cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fe90 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 fc3c 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e044      	b.n	8001d7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_TIM_Base_Start_IT+0xb0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1e:	d013      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0x6c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_TIM_Base_Start_IT+0xc0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d111      	bne.n	8001d6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d010      	beq.n	8001d7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6a:	e007      	b.n	8001d7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	40000400 	.word	0x40000400
 8001d94:	40000800 	.word	0x40000800
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	40014000 	.word	0x40014000

08001da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e041      	b.n	8001e36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f839 	bl	8001e3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 fb8a 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_TIM_PWM_Start+0x24>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e022      	b.n	8001ebe <HAL_TIM_PWM_Start+0x6a>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d109      	bne.n	8001e92 <HAL_TIM_PWM_Start+0x3e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	e015      	b.n	8001ebe <HAL_TIM_PWM_Start+0x6a>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d109      	bne.n	8001eac <HAL_TIM_PWM_Start+0x58>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e008      	b.n	8001ebe <HAL_TIM_PWM_Start+0x6a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e068      	b.n	8001f98 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <HAL_TIM_PWM_Start+0x82>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ed4:	e013      	b.n	8001efe <HAL_TIM_PWM_Start+0xaa>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d104      	bne.n	8001ee6 <HAL_TIM_PWM_Start+0x92>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee4:	e00b      	b.n	8001efe <HAL_TIM_PWM_Start+0xaa>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d104      	bne.n	8001ef6 <HAL_TIM_PWM_Start+0xa2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ef4:	e003      	b.n	8001efe <HAL_TIM_PWM_Start+0xaa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fda8 	bl	8002a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <HAL_TIM_PWM_Start+0x14c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d107      	bne.n	8001f26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_TIM_PWM_Start+0x14c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d018      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x10e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d013      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x10e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_TIM_PWM_Start+0x150>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00e      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x10e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_TIM_PWM_Start+0x154>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x10e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a16      	ldr	r2, [pc, #88]	; (8001fac <HAL_TIM_PWM_Start+0x158>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_TIM_PWM_Start+0x10e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <HAL_TIM_PWM_Start+0x15c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d111      	bne.n	8001f86 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b06      	cmp	r3, #6
 8001f72:	d010      	beq.n	8001f96 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f84:	e007      	b.n	8001f96 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40014000 	.word	0x40014000

08001fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0202 	mvn.w	r2, #2
 8001fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa5b 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fa4d 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fa5e 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d020      	beq.n	8002064 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0204 	mvn.w	r2, #4
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa35 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa27 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fa38 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d020      	beq.n	80020b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0208 	mvn.w	r2, #8
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa0f 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa01 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fa12 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d020      	beq.n	80020fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0210 	mvn.w	r2, #16
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2208      	movs	r2, #8
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f9e9 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f9db 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f9ec 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00c      	beq.n	8002120 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0201 	mvn.w	r2, #1
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fbf0 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fd2a 	bl	8002b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9bd 	bl	80024e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0220 	mvn.w	r2, #32
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fcfc 	bl	8002b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e0ae      	b.n	8002310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	f200 809f 	bhi.w	8002300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	080021fd 	.word	0x080021fd
 80021cc:	08002301 	.word	0x08002301
 80021d0:	08002301 	.word	0x08002301
 80021d4:	08002301 	.word	0x08002301
 80021d8:	0800223d 	.word	0x0800223d
 80021dc:	08002301 	.word	0x08002301
 80021e0:	08002301 	.word	0x08002301
 80021e4:	08002301 	.word	0x08002301
 80021e8:	0800227f 	.word	0x0800227f
 80021ec:	08002301 	.word	0x08002301
 80021f0:	08002301 	.word	0x08002301
 80021f4:	08002301 	.word	0x08002301
 80021f8:	080022bf 	.word	0x080022bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f000 fa04 	bl	8002610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0208 	orr.w	r2, r2, #8
 8002216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0204 	bic.w	r2, r2, #4
 8002226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6999      	ldr	r1, [r3, #24]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	619a      	str	r2, [r3, #24]
      break;
 800223a:	e064      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fa4a 	bl	80026dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6999      	ldr	r1, [r3, #24]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	021a      	lsls	r2, r3, #8
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	619a      	str	r2, [r3, #24]
      break;
 800227c:	e043      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fa95 	bl	80027b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0208 	orr.w	r2, r2, #8
 8002298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0204 	bic.w	r2, r2, #4
 80022a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69d9      	ldr	r1, [r3, #28]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	61da      	str	r2, [r3, #28]
      break;
 80022bc:	e023      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fadf 	bl	8002888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69d9      	ldr	r1, [r3, #28]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	61da      	str	r2, [r3, #28]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
      break;
 8002304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800230e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_TIM_ConfigClockSource+0x1c>
 8002330:	2302      	movs	r3, #2
 8002332:	e0b4      	b.n	800249e <HAL_TIM_ConfigClockSource+0x186>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236c:	d03e      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0xd4>
 800236e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002372:	f200 8087 	bhi.w	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	f000 8086 	beq.w	800248a <HAL_TIM_ConfigClockSource+0x172>
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002382:	d87f      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d01a      	beq.n	80023be <HAL_TIM_ConfigClockSource+0xa6>
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d87b      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d050      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x11a>
 8002390:	2b60      	cmp	r3, #96	; 0x60
 8002392:	d877      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d03c      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0xfa>
 8002398:	2b50      	cmp	r3, #80	; 0x50
 800239a:	d873      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d058      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x13a>
 80023a0:	2b40      	cmp	r3, #64	; 0x40
 80023a2:	d86f      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d064      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x15a>
 80023a8:	2b30      	cmp	r3, #48	; 0x30
 80023aa:	d86b      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d060      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x15a>
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d867      	bhi.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05c      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x15a>
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d05a      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x15a>
 80023bc:	e062      	b.n	8002484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023ce:	f000 fb25 	bl	8002a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	609a      	str	r2, [r3, #8]
      break;
 80023ea:	e04f      	b.n	800248c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023fc:	f000 fb0e 	bl	8002a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240e:	609a      	str	r2, [r3, #8]
      break;
 8002410:	e03c      	b.n	800248c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	461a      	mov	r2, r3
 8002420:	f000 fa82 	bl	8002928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2150      	movs	r1, #80	; 0x50
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fadb 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 8002430:	e02c      	b.n	800248c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800243e:	461a      	mov	r2, r3
 8002440:	f000 faa1 	bl	8002986 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2160      	movs	r1, #96	; 0x60
 800244a:	4618      	mov	r0, r3
 800244c:	f000 facb 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 8002450:	e01c      	b.n	800248c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	461a      	mov	r2, r3
 8002460:	f000 fa62 	bl	8002928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fabb 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 8002470:	e00c      	b.n	800248c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f000 fab2 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 8002482:	e003      	b.n	800248c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      break;
 8002488:	e000      	b.n	800248c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800248a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <TIM_Base_SetConfig+0xfc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00f      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d00b      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a37      	ldr	r2, [pc, #220]	; (80025f8 <TIM_Base_SetConfig+0x100>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a36      	ldr	r2, [pc, #216]	; (80025fc <TIM_Base_SetConfig+0x104>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <TIM_Base_SetConfig+0x38>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a35      	ldr	r2, [pc, #212]	; (8002600 <TIM_Base_SetConfig+0x108>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d108      	bne.n	8002542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <TIM_Base_SetConfig+0xfc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01b      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002550:	d017      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a28      	ldr	r2, [pc, #160]	; (80025f8 <TIM_Base_SetConfig+0x100>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <TIM_Base_SetConfig+0x104>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00f      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a26      	ldr	r2, [pc, #152]	; (8002600 <TIM_Base_SetConfig+0x108>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a25      	ldr	r2, [pc, #148]	; (8002604 <TIM_Base_SetConfig+0x10c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <TIM_Base_SetConfig+0x110>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_Base_SetConfig+0x8a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a23      	ldr	r2, [pc, #140]	; (800260c <TIM_Base_SetConfig+0x114>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d108      	bne.n	8002594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <TIM_Base_SetConfig+0xfc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d105      	bne.n	80025e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f023 0201 	bic.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	611a      	str	r2, [r3, #16]
  }
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40000400 	.word	0x40000400
 80025fc:	40000800 	.word	0x40000800
 8002600:	40000c00 	.word	0x40000c00
 8002604:	40014000 	.word	0x40014000
 8002608:	40014400 	.word	0x40014400
 800260c:	40014800 	.word	0x40014800

08002610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f023 0201 	bic.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f023 0302 	bic.w	r3, r3, #2
 8002658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <TIM_OC1_SetConfig+0xc8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d10c      	bne.n	8002686 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0308 	bic.w	r3, r3, #8
 8002672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <TIM_OC1_SetConfig+0xc8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d111      	bne.n	80026b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800269c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	621a      	str	r2, [r3, #32]
}
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40010000 	.word	0x40010000

080026dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f023 0210 	bic.w	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800270a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f023 0320 	bic.w	r3, r3, #32
 8002726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <TIM_OC2_SetConfig+0xd4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10d      	bne.n	8002758 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <TIM_OC2_SetConfig+0xd4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d113      	bne.n	8002788 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800276e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000

080027b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <TIM_OC3_SetConfig+0xd0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10d      	bne.n	800282e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800282c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a14      	ldr	r2, [pc, #80]	; (8002884 <TIM_OC3_SetConfig+0xd0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d113      	bne.n	800285e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800283c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	621a      	str	r2, [r3, #32]
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40010000 	.word	0x40010000

08002888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	031b      	lsls	r3, r3, #12
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <TIM_OC4_SetConfig+0x9c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d109      	bne.n	80028fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	019b      	lsls	r3, r3, #6
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000

08002928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 030a 	bic.w	r3, r3, #10
 8002964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	621a      	str	r2, [r3, #32]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 0210 	bic.w	r2, r3, #16
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	031b      	lsls	r3, r3, #12
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f043 0307 	orr.w	r3, r3, #7
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	021a      	lsls	r2, r3, #8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2201      	movs	r2, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1a      	ldr	r2, [r3, #32]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	401a      	ands	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e050      	b.n	8002b62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d018      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d013      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d009      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10c      	bne.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40014000 	.word	0x40014000

08002b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e042      	b.n	8002c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd ff30 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	; 0x24
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f82b 	bl	8002c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b0c0      	sub	sp, #256	; 0x100
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	68d9      	ldr	r1, [r3, #12]
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	ea40 0301 	orr.w	r3, r0, r1
 8002c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca4:	f021 010c 	bic.w	r1, r1, #12
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc6:	6999      	ldr	r1, [r3, #24]
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	ea40 0301 	orr.w	r3, r0, r1
 8002cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4b8f      	ldr	r3, [pc, #572]	; (8002f18 <UART_SetConfig+0x2cc>)
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <UART_SetConfig+0xa0>
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	; (8002f1c <UART_SetConfig+0x2d0>)
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d104      	bne.n	8002cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7fe ff60 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cf4:	e003      	b.n	8002cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf6:	f7fe ff47 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d08:	f040 810c 	bne.w	8002f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d10:	2200      	movs	r2, #0
 8002d12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d1e:	4622      	mov	r2, r4
 8002d20:	462b      	mov	r3, r5
 8002d22:	1891      	adds	r1, r2, r2
 8002d24:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d26:	415b      	adcs	r3, r3
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d2e:	4621      	mov	r1, r4
 8002d30:	eb12 0801 	adds.w	r8, r2, r1
 8002d34:	4629      	mov	r1, r5
 8002d36:	eb43 0901 	adc.w	r9, r3, r1
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d4e:	4690      	mov	r8, r2
 8002d50:	4699      	mov	r9, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	eb18 0303 	adds.w	r3, r8, r3
 8002d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	eb49 0303 	adc.w	r3, r9, r3
 8002d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	18db      	adds	r3, r3, r3
 8002d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d80:	4613      	mov	r3, r2
 8002d82:	eb42 0303 	adc.w	r3, r2, r3
 8002d86:	657b      	str	r3, [r7, #84]	; 0x54
 8002d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d90:	f7fd fa26 	bl	80001e0 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	011c      	lsls	r4, r3, #4
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dca:	4649      	mov	r1, r9
 8002dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de4:	4692      	mov	sl, r2
 8002de6:	469b      	mov	fp, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	eb1a 0303 	adds.w	r3, sl, r3
 8002dee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df2:	464b      	mov	r3, r9
 8002df4:	eb4b 0303 	adc.w	r3, fp, r3
 8002df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e10:	460b      	mov	r3, r1
 8002e12:	18db      	adds	r3, r3, r3
 8002e14:	643b      	str	r3, [r7, #64]	; 0x40
 8002e16:	4613      	mov	r3, r2
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e26:	f7fd f9db 	bl	80001e0 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2264      	movs	r2, #100	; 0x64
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	1acb      	subs	r3, r1, r3
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002e48:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e54:	441c      	add	r4, r3
 8002e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	1891      	adds	r1, r2, r2
 8002e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e70:	415b      	adcs	r3, r3
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e78:	4641      	mov	r1, r8
 8002e7a:	1851      	adds	r1, r2, r1
 8002e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e7e:	4649      	mov	r1, r9
 8002e80:	414b      	adcs	r3, r1
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e90:	4659      	mov	r1, fp
 8002e92:	00cb      	lsls	r3, r1, #3
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	00ca      	lsls	r2, r1, #3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eac:	464b      	mov	r3, r9
 8002eae:	460a      	mov	r2, r1
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ecc:	460b      	mov	r3, r1
 8002ece:	18db      	adds	r3, r3, r3
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ee2:	f7fd f97d 	bl	80001e0 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002eec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	2164      	movs	r1, #100	; 0x64
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	3332      	adds	r3, #50	; 0x32
 8002efe:	4a08      	ldr	r2, [pc, #32]	; (8002f20 <UART_SetConfig+0x2d4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	f003 0207 	and.w	r2, r3, #7
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4422      	add	r2, r4
 8002f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f14:	e106      	b.n	8003124 <UART_SetConfig+0x4d8>
 8002f16:	bf00      	nop
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f36:	4642      	mov	r2, r8
 8002f38:	464b      	mov	r3, r9
 8002f3a:	1891      	adds	r1, r2, r2
 8002f3c:	6239      	str	r1, [r7, #32]
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f46:	4641      	mov	r1, r8
 8002f48:	1854      	adds	r4, r2, r1
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	eb43 0501 	adc.w	r5, r3, r1
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	00eb      	lsls	r3, r5, #3
 8002f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5e:	00e2      	lsls	r2, r4, #3
 8002f60:	4614      	mov	r4, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	4643      	mov	r3, r8
 8002f66:	18e3      	adds	r3, r4, r3
 8002f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	eb45 0303 	adc.w	r3, r5, r3
 8002f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f92:	4629      	mov	r1, r5
 8002f94:	008b      	lsls	r3, r1, #2
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	008a      	lsls	r2, r1, #2
 8002fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fa4:	f7fd f91c 	bl	80001e0 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b60      	ldr	r3, [pc, #384]	; (8003130 <UART_SetConfig+0x4e4>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	61b9      	str	r1, [r7, #24]
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6139      	str	r1, [r7, #16]
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800300c:	464b      	mov	r3, r9
 800300e:	460a      	mov	r2, r1
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	67bb      	str	r3, [r7, #120]	; 0x78
 8003022:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003030:	4649      	mov	r1, r9
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	4641      	mov	r1, r8
 8003036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303a:	4641      	mov	r1, r8
 800303c:	008a      	lsls	r2, r1, #2
 800303e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003042:	f7fd f8cd 	bl	80001e0 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4611      	mov	r1, r2
 800304c:	4b38      	ldr	r3, [pc, #224]	; (8003130 <UART_SetConfig+0x4e4>)
 800304e:	fba3 2301 	umull	r2, r3, r3, r1
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2264      	movs	r2, #100	; 0x64
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	1acb      	subs	r3, r1, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	3332      	adds	r3, #50	; 0x32
 8003060:	4a33      	ldr	r2, [pc, #204]	; (8003130 <UART_SetConfig+0x4e4>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	673b      	str	r3, [r7, #112]	; 0x70
 8003076:	677a      	str	r2, [r7, #116]	; 0x74
 8003078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	415b      	adcs	r3, r3
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80030be:	464b      	mov	r3, r9
 80030c0:	460a      	mov	r2, r1
 80030c2:	eb42 0303 	adc.w	r3, r2, r3
 80030c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	663b      	str	r3, [r7, #96]	; 0x60
 80030d2:	667a      	str	r2, [r7, #100]	; 0x64
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030e0:	4649      	mov	r1, r9
 80030e2:	008b      	lsls	r3, r1, #2
 80030e4:	4641      	mov	r1, r8
 80030e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ea:	4641      	mov	r1, r8
 80030ec:	008a      	lsls	r2, r1, #2
 80030ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030f2:	f7fd f875 	bl	80001e0 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <UART_SetConfig+0x4e4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <UART_SetConfig+0x4e4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4422      	add	r2, r4
 8003122:	609a      	str	r2, [r3, #8]
}
 8003124:	bf00      	nop
 8003126:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800312a:	46bd      	mov	sp, r7
 800312c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003130:	51eb851f 	.word	0x51eb851f

08003134 <__NVIC_SetPriority>:
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	; (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <SysTick_Handler+0x1c>)
 800318e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003190:	f001 fe50 	bl	8004e34 <xTaskGetSchedulerState>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800319a:	f002 fc35 	bl	8005a08 <xPortSysTickHandler>
  }
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	e000e010 	.word	0xe000e010

080031a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80031ac:	2100      	movs	r1, #0
 80031ae:	f06f 0004 	mvn.w	r0, #4
 80031b2:	f7ff ffbf 	bl	8003134 <__NVIC_SetPriority>
#endif
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031c2:	f3ef 8305 	mrs	r3, IPSR
 80031c6:	603b      	str	r3, [r7, #0]
  return(result);
 80031c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80031ce:	f06f 0305 	mvn.w	r3, #5
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	e00c      	b.n	80031f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <osKernelInitialize+0x44>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <osKernelInitialize+0x44>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	e002      	b.n	80031f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031f0:	687b      	ldr	r3, [r7, #4]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000164 	.word	0x20000164

08003204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800320a:	f3ef 8305 	mrs	r3, IPSR
 800320e:	603b      	str	r3, [r7, #0]
  return(result);
 8003210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003216:	f06f 0305 	mvn.w	r3, #5
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	e010      	b.n	8003240 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <osKernelStart+0x48>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d109      	bne.n	800323a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003226:	f7ff ffbf 	bl	80031a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <osKernelStart+0x48>)
 800322c:	2202      	movs	r2, #2
 800322e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003230:	f001 f9a4 	bl	800457c <vTaskStartScheduler>
      stat = osOK;
 8003234:	2300      	movs	r3, #0
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e002      	b.n	8003240 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003240:	687b      	ldr	r3, [r7, #4]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000164 	.word	0x20000164

08003250 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	; 0x38
 8003254:	af04      	add	r7, sp, #16
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003260:	f3ef 8305 	mrs	r3, IPSR
 8003264:	617b      	str	r3, [r7, #20]
  return(result);
 8003266:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003268:	2b00      	cmp	r3, #0
 800326a:	d17e      	bne.n	800336a <osThreadNew+0x11a>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d07b      	beq.n	800336a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003276:	2318      	movs	r3, #24
 8003278:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d045      	beq.n	8003316 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <osThreadNew+0x48>
        name = attr->name;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <osThreadNew+0x6e>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b38      	cmp	r3, #56	; 0x38
 80032b0:	d805      	bhi.n	80032be <osThreadNew+0x6e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <osThreadNew+0x72>
        return (NULL);
 80032be:	2300      	movs	r3, #0
 80032c0:	e054      	b.n	800336c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <osThreadNew+0xa8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2ba7      	cmp	r3, #167	; 0xa7
 80032e0:	d90a      	bls.n	80032f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <osThreadNew+0xa8>
        mem = 1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	e010      	b.n	800331a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10c      	bne.n	800331a <osThreadNew+0xca>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <osThreadNew+0xca>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <osThreadNew+0xca>
          mem = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e001      	b.n	800331a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d110      	bne.n	8003342 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003328:	9202      	str	r2, [sp, #8]
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 febe 	bl	80040b8 <xTaskCreateStatic>
 800333c:	4603      	mov	r3, r0
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	e013      	b.n	800336a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d110      	bne.n	800336a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	b29a      	uxth	r2, r3
 800334c:	f107 0310 	add.w	r3, r7, #16
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 ff09 	bl	8004172 <xTaskCreate>
 8003360:	4603      	mov	r3, r0
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <osThreadNew+0x11a>
            hTask = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800336a:	693b      	ldr	r3, [r7, #16]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003380:	f3ef 8305 	mrs	r3, IPSR
 8003384:	60fb      	str	r3, [r7, #12]
  return(result);
 8003386:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800338c:	f06f 0305 	mvn.w	r3, #5
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e00b      	b.n	80033ac <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800339a:	f06f 0303 	mvn.w	r3, #3
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e004      	b.n	80033ac <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80033a6:	6938      	ldr	r0, [r7, #16]
 80033a8:	f001 f872 	bl	8004490 <vTaskSuspend>
  }

  return (stat);
 80033ac:	697b      	ldr	r3, [r7, #20]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033be:	f3ef 8305 	mrs	r3, IPSR
 80033c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80033c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <osDelay+0x1c>
    stat = osErrorISR;
 80033ca:	f06f 0305 	mvn.w	r3, #5
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e007      	b.n	80033e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f001 f823 	bl	8004428 <vTaskDelay>
    }
  }

  return (stat);
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033f8:	f3ef 8305 	mrs	r3, IPSR
 80033fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80033fe:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12d      	bne.n	8003460 <osEventFlagsNew+0x74>
    mem = -1;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <osEventFlagsNew+0x3a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b1f      	cmp	r3, #31
 800341e:	d902      	bls.n	8003426 <osEventFlagsNew+0x3a>
        mem = 1;
 8003420:	2301      	movs	r3, #1
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	e00c      	b.n	8003440 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d108      	bne.n	8003440 <osEventFlagsNew+0x54>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <osEventFlagsNew+0x54>
          mem = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e001      	b.n	8003440 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d106      	bne.n	8003454 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f842 	bl	80034d4 <xEventGroupCreateStatic>
 8003450:	6178      	str	r0, [r7, #20]
 8003452:	e005      	b.n	8003460 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800345a:	f000 f872 	bl	8003542 <xEventGroupCreate>
 800345e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8003460:	697b      	ldr	r3, [r7, #20]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a07      	ldr	r2, [pc, #28]	; (8003498 <vApplicationGetIdleTaskMemory+0x2c>)
 800347c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <vApplicationGetIdleTaskMemory+0x30>)
 8003482:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000168 	.word	0x20000168
 800349c:	20000210 	.word	0x20000210

080034a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <vApplicationGetTimerTaskMemory+0x2c>)
 80034b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a06      	ldr	r2, [pc, #24]	; (80034d0 <vApplicationGetTimerTaskMemory+0x30>)
 80034b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034be:	601a      	str	r2, [r3, #0]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20000410 	.word	0x20000410
 80034d0:	200004b8 	.word	0x200004b8

080034d4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80034f8:	2320      	movs	r3, #32
 80034fa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d00a      	beq.n	8003518 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60fb      	str	r3, [r7, #12]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3304      	adds	r3, #4
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f822 	bl	8003576 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2201      	movs	r2, #1
 8003536:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003538:	697b      	ldr	r3, [r7, #20]
	}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003548:	2020      	movs	r0, #32
 800354a:	f002 faed 	bl	8005b28 <pvPortMalloc>
 800354e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f808 	bl	8003576 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800356c:	687b      	ldr	r3, [r7, #4]
	}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f103 0208 	add.w	r2, r3, #8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f04f 32ff 	mov.w	r2, #4294967295
 800358e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f103 0208 	add.w	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f103 0208 	add.w	r2, r3, #8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	601a      	str	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d103      	bne.n	8003638 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e00c      	b.n	8003652 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3308      	adds	r3, #8
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e002      	b.n	8003646 <vListInsert+0x2e>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d2f6      	bcs.n	8003640 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6892      	ldr	r2, [r2, #8]
 80036a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6852      	ldr	r2, [r2, #4]
 80036aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d103      	bne.n	80036be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1e5a      	subs	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xQueueGenericReset+0x2a>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60bb      	str	r3, [r7, #8]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800370a:	f002 f8eb 	bl	80058e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	3b01      	subs	r3, #1
 800373c:	68f9      	ldr	r1, [r7, #12]
 800373e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	441a      	add	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	22ff      	movs	r2, #255	; 0xff
 8003756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d114      	bne.n	800378a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01a      	beq.n	800379e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3310      	adds	r3, #16
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f99f 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <xQueueGenericReset+0xcc>)
 800377a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	e009      	b.n	800379e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3310      	adds	r3, #16
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fef1 	bl	8003576 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3324      	adds	r3, #36	; 0x24
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff feec 	bl	8003576 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800379e:	f002 f8d1 	bl	8005944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	e000ed04 	.word	0xe000ed04

080037b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08e      	sub	sp, #56	; 0x38
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <xQueueGenericCreateStatic+0x52>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <xQueueGenericCreateStatic+0x56>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueGenericCreateStatic+0x58>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	623b      	str	r3, [r7, #32]
}
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <xQueueGenericCreateStatic+0x7e>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <xQueueGenericCreateStatic+0x82>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <xQueueGenericCreateStatic+0x84>
 8003832:	2300      	movs	r3, #0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	61fb      	str	r3, [r7, #28]
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800384e:	2350      	movs	r3, #80	; 0x50
 8003850:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d00a      	beq.n	800386e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61bb      	str	r3, [r7, #24]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800386e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003882:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f805 	bl	80038a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003898:	4618      	mov	r0, r3
 800389a:	3730      	adds	r7, #48	; 0x30
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038ce:	2101      	movs	r1, #1
 80038d0:	69b8      	ldr	r0, [r7, #24]
 80038d2:	f7ff ff05 	bl	80036e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	; 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <xQueueGenericSend+0x32>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <xQueueGenericSend+0x40>
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <xQueueGenericSend+0x44>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <xQueueGenericSend+0x46>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <xQueueGenericSend+0x60>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d103      	bne.n	8003956 <xQueueGenericSend+0x6e>
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <xQueueGenericSend+0x72>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <xQueueGenericSend+0x74>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <xQueueGenericSend+0x8e>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	623b      	str	r3, [r7, #32]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003976:	f001 fa5d 	bl	8004e34 <xTaskGetSchedulerState>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <xQueueGenericSend+0x9e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <xQueueGenericSend+0xa2>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <xQueueGenericSend+0xa4>
 800398a:	2300      	movs	r3, #0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	61fb      	str	r3, [r7, #28]
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039a6:	f001 ff9d 	bl	80058e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <xQueueGenericSend+0xd4>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d129      	bne.n	8003a10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c2:	f000 fa0b 	bl	8003ddc <prvCopyDataToQueue>
 80039c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d010      	beq.n	80039f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	3324      	adds	r3, #36	; 0x24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 f86b 	bl	8004ab0 <xTaskRemoveFromEventList>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e0:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <xQueueGenericSend+0x1f8>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	e00a      	b.n	8003a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039f8:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <xQueueGenericSend+0x1f8>)
 80039fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a08:	f001 ff9c 	bl	8005944 <vPortExitCritical>
				return pdPASS;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e063      	b.n	8003ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a16:	f001 ff95 	bl	8005944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e05c      	b.n	8003ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 f8a5 	bl	8004b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a32:	f001 ff87 	bl	8005944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a36:	f000 fe11 	bl	800465c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a3a:	f001 ff53 	bl	80058e4 <vPortEnterCritical>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a44:	b25b      	sxtb	r3, r3
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d103      	bne.n	8003a54 <xQueueGenericSend+0x16c>
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d103      	bne.n	8003a6a <xQueueGenericSend+0x182>
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a6a:	f001 ff6b 	bl	8005944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a6e:	1d3a      	adds	r2, r7, #4
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f894 	bl	8004ba4 <xTaskCheckForTimeOut>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d124      	bne.n	8003acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a84:	f000 faa2 	bl	8003fcc <prvIsQueueFull>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d018      	beq.n	8003ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	3310      	adds	r3, #16
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 ffba 	bl	8004a10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a9e:	f000 fa2d 	bl	8003efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aa2:	f000 fde9 	bl	8004678 <xTaskResumeAll>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f47f af7c 	bne.w	80039a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <xQueueGenericSend+0x1f8>)
 8003ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	e772      	b.n	80039a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac2:	f000 fa1b 	bl	8003efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ac6:	f000 fdd7 	bl	8004678 <xTaskResumeAll>
 8003aca:	e76c      	b.n	80039a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ace:	f000 fa15 	bl	8003efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ad2:	f000 fdd1 	bl	8004678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3738      	adds	r7, #56	; 0x38
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b090      	sub	sp, #64	; 0x40
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <xQueueGenericSendFromISR+0x3c>
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <xQueueGenericSendFromISR+0x40>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <xQueueGenericSendFromISR+0x42>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d103      	bne.n	8003b4e <xQueueGenericSendFromISR+0x6a>
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <xQueueGenericSendFromISR+0x6e>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <xQueueGenericSendFromISR+0x70>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	623b      	str	r3, [r7, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b6e:	f001 ff9b 	bl	8005aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b72:	f3ef 8211 	mrs	r2, BASEPRI
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	61fa      	str	r2, [r7, #28]
 8003b88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <xQueueGenericSendFromISR+0xbc>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d12f      	bne.n	8003c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bb6:	f000 f911 	bl	8003ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc2:	d112      	bne.n	8003bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d016      	beq.n	8003bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	3324      	adds	r3, #36	; 0x24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 ff6d 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00e      	beq.n	8003bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e007      	b.n	8003bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bee:	3301      	adds	r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	b25a      	sxtb	r2, r3
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003bfe:	e001      	b.n	8003c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3740      	adds	r7, #64	; 0x40
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	; 0x30
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <xQueueReceive+0x30>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	623b      	str	r3, [r7, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <xQueueReceive+0x3e>
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueReceive+0x42>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueReceive+0x44>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xQueueReceive+0x5e>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	61fb      	str	r3, [r7, #28]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7a:	f001 f8db 	bl	8004e34 <xTaskGetSchedulerState>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <xQueueReceive+0x6e>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <xQueueReceive+0x72>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <xQueueReceive+0x74>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xQueueReceive+0x8e>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	61bb      	str	r3, [r7, #24]
}
 8003ca6:	bf00      	nop
 8003ca8:	e7fe      	b.n	8003ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003caa:	f001 fe1b 	bl	80058e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01f      	beq.n	8003cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cbe:	f000 f8f7 	bl	8003eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	1e5a      	subs	r2, r3, #1
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00f      	beq.n	8003cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 feea 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <xQueueReceive+0x1bc>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cf2:	f001 fe27 	bl	8005944 <vPortExitCritical>
				return pdPASS;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e069      	b.n	8003dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d00:	f001 fe20 	bl	8005944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e062      	b.n	8003dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d0e:	f107 0310 	add.w	r3, r7, #16
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 ff30 	bl	8004b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d1c:	f001 fe12 	bl	8005944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d20:	f000 fc9c 	bl	800465c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d24:	f001 fdde 	bl	80058e4 <vPortEnterCritical>
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d2e:	b25b      	sxtb	r3, r3
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d103      	bne.n	8003d3e <xQueueReceive+0x122>
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d103      	bne.n	8003d54 <xQueueReceive+0x138>
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d54:	f001 fdf6 	bl	8005944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d58:	1d3a      	adds	r2, r7, #4
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 ff1f 	bl	8004ba4 <xTaskCheckForTimeOut>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d123      	bne.n	8003db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d6e:	f000 f917 	bl	8003fa0 <prvIsQueueEmpty>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	3324      	adds	r3, #36	; 0x24
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fe45 	bl	8004a10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d88:	f000 f8b8 	bl	8003efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d8c:	f000 fc74 	bl	8004678 <xTaskResumeAll>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d189      	bne.n	8003caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <xQueueReceive+0x1bc>)
 8003d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	e780      	b.n	8003caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003daa:	f000 f8a7 	bl	8003efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dae:	f000 fc63 	bl	8004678 <xTaskResumeAll>
 8003db2:	e77a      	b.n	8003caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db6:	f000 f8a1 	bl	8003efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dba:	f000 fc5d 	bl	8004678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc0:	f000 f8ee 	bl	8003fa0 <prvIsQueueEmpty>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f43f af6f 	beq.w	8003caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3730      	adds	r7, #48	; 0x30
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d14d      	bne.n	8003e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f832 	bl	8004e70 <xTaskPriorityDisinherit>
 8003e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	e043      	b.n	8003e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d119      	bne.n	8003e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6858      	ldr	r0, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	f002 f8ec 	bl	8006004 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	441a      	add	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d32b      	bcc.n	8003e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	e026      	b.n	8003e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68d8      	ldr	r0, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	f002 f8d2 	bl	8006004 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	425b      	negs	r3, r3
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d207      	bcs.n	8003e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	425b      	negs	r3, r3
 8003e86:	441a      	add	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d105      	bne.n	8003e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d018      	beq.n	8003ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	441a      	add	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d303      	bcc.n	8003ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68d9      	ldr	r1, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	461a      	mov	r2, r3
 8003eee:	6838      	ldr	r0, [r7, #0]
 8003ef0:	f002 f888 	bl	8006004 <memcpy>
	}
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f04:	f001 fcee 	bl	80058e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f10:	e011      	b.n	8003f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3324      	adds	r3, #36	; 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fdc6 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f2a:	f000 fe9d 	bl	8004c68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	dce9      	bgt.n	8003f12 <prvUnlockQueue+0x16>
 8003f3e:	e000      	b.n	8003f42 <prvUnlockQueue+0x46>
					break;
 8003f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f4a:	f001 fcfb 	bl	8005944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f4e:	f001 fcc9 	bl	80058e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f5a:	e011      	b.n	8003f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3310      	adds	r3, #16
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fda1 	bl	8004ab0 <xTaskRemoveFromEventList>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f74:	f000 fe78 	bl	8004c68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f78:	7bbb      	ldrb	r3, [r7, #14]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dce9      	bgt.n	8003f5c <prvUnlockQueue+0x60>
 8003f88:	e000      	b.n	8003f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f94:	f001 fcd6 	bl	8005944 <vPortExitCritical>
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fa8:	f001 fc9c 	bl	80058e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e001      	b.n	8003fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fbe:	f001 fcc1 	bl	8005944 <vPortExitCritical>

	return xReturn;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fd4:	f001 fc86 	bl	80058e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d102      	bne.n	8003fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e001      	b.n	8003fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fee:	f001 fca9 	bl	8005944 <vPortExitCritical>

	return xReturn;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e014      	b.n	8004036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800400c:	4a0f      	ldr	r2, [pc, #60]	; (800404c <vQueueAddToRegistry+0x50>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004018:	490c      	ldr	r1, [pc, #48]	; (800404c <vQueueAddToRegistry+0x50>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <vQueueAddToRegistry+0x50>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800402e:	e006      	b.n	800403e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b07      	cmp	r3, #7
 800403a:	d9e7      	bls.n	800400c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	200008b8 	.word	0x200008b8

08004050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004060:	f001 fc40 	bl	80058e4 <vPortEnterCritical>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800406a:	b25b      	sxtb	r3, r3
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d103      	bne.n	800407a <vQueueWaitForMessageRestricted+0x2a>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004080:	b25b      	sxtb	r3, r3
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d103      	bne.n	8004090 <vQueueWaitForMessageRestricted+0x40>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004090:	f001 fc58 	bl	8005944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3324      	adds	r3, #36	; 0x24
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fcd7 	bl	8004a58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff ff26 	bl	8003efc <prvUnlockQueue>
	}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af04      	add	r7, sp, #16
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	623b      	str	r3, [r7, #32]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <xTaskCreateStatic+0x46>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	61fb      	str	r3, [r7, #28]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040fe:	23a8      	movs	r3, #168	; 0xa8
 8004100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2ba8      	cmp	r3, #168	; 0xa8
 8004106:	d00a      	beq.n	800411e <xTaskCreateStatic+0x66>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	61bb      	str	r3, [r7, #24]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800411e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01e      	beq.n	8004164 <xTaskCreateStatic+0xac>
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01b      	beq.n	8004164 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2202      	movs	r2, #2
 800413a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800413e:	2300      	movs	r3, #0
 8004140:	9303      	str	r3, [sp, #12]
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	f107 0314 	add.w	r3, r7, #20
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f850 	bl	80041fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800415c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800415e:	f000 f8f3 	bl	8004348 <prvAddNewTaskToReadyList>
 8004162:	e001      	b.n	8004168 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004168:	697b      	ldr	r3, [r7, #20]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004172:	b580      	push	{r7, lr}
 8004174:	b08c      	sub	sp, #48	; 0x30
 8004176:	af04      	add	r7, sp, #16
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fcce 	bl	8005b28 <pvPortMalloc>
 800418c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004194:	20a8      	movs	r0, #168	; 0xa8
 8004196:	f001 fcc7 	bl	8005b28 <pvPortMalloc>
 800419a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
 80041a8:	e005      	b.n	80041b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041aa:	6978      	ldr	r0, [r7, #20]
 80041ac:	f001 fd88 	bl	8005cc0 <vPortFree>
 80041b0:	e001      	b.n	80041b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d017      	beq.n	80041ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9303      	str	r3, [sp, #12]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	9302      	str	r3, [sp, #8]
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f80e 	bl	80041fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e0:	69f8      	ldr	r0, [r7, #28]
 80041e2:	f000 f8b1 	bl	8004348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e002      	b.n	80041f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041ec:	f04f 33ff 	mov.w	r3, #4294967295
 80041f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041f2:	69bb      	ldr	r3, [r7, #24]
	}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	461a      	mov	r2, r3
 8004214:	21a5      	movs	r1, #165	; 0xa5
 8004216:	f001 fe71 	bl	8005efc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004224:	3b01      	subs	r3, #1
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f023 0307 	bic.w	r3, r3, #7
 8004232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <prvInitialiseNewTask+0x58>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01f      	beq.n	800429a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e012      	b.n	8004286 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	7819      	ldrb	r1, [r3, #0]
 8004268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	3334      	adds	r3, #52	; 0x34
 8004270:	460a      	mov	r2, r1
 8004272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d006      	beq.n	800428e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d9e9      	bls.n	8004260 <prvInitialiseNewTask+0x64>
 800428c:	e000      	b.n	8004290 <prvInitialiseNewTask+0x94>
			{
				break;
 800428e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004298:	e003      	b.n	80042a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	2b37      	cmp	r3, #55	; 0x37
 80042a6:	d901      	bls.n	80042ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042a8:	2337      	movs	r3, #55	; 0x37
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	2200      	movs	r2, #0
 80042bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	3304      	adds	r3, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f977 	bl	80035b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	3318      	adds	r3, #24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f972 	bl	80035b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	3354      	adds	r3, #84	; 0x54
 80042fc:	224c      	movs	r2, #76	; 0x4c
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f001 fdfb 	bl	8005efc <memset>
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	4a0c      	ldr	r2, [pc, #48]	; (800433c <prvInitialiseNewTask+0x140>)
 800430a:	659a      	str	r2, [r3, #88]	; 0x58
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <prvInitialiseNewTask+0x144>)
 8004310:	65da      	str	r2, [r3, #92]	; 0x5c
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <prvInitialiseNewTask+0x148>)
 8004316:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	68f9      	ldr	r1, [r7, #12]
 800431c:	69b8      	ldr	r0, [r7, #24]
 800431e:	f001 f9b7 	bl	8005690 <pxPortInitialiseStack>
 8004322:	4602      	mov	r2, r0
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004332:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004334:	bf00      	nop
 8004336:	3720      	adds	r7, #32
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20004b4c 	.word	0x20004b4c
 8004340:	20004bb4 	.word	0x20004bb4
 8004344:	20004c1c 	.word	0x20004c1c

08004348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004350:	f001 fac8 	bl	80058e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <prvAddNewTaskToReadyList+0xc4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3301      	adds	r3, #1
 800435a:	4a2c      	ldr	r2, [pc, #176]	; (800440c <prvAddNewTaskToReadyList+0xc4>)
 800435c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004366:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800436c:	4b27      	ldr	r3, [pc, #156]	; (800440c <prvAddNewTaskToReadyList+0xc4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d110      	bne.n	8004396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004374:	f000 fc9c 	bl	8004cb0 <prvInitialiseTaskLists>
 8004378:	e00d      	b.n	8004396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <prvAddNewTaskToReadyList+0xcc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004382:	4b23      	ldr	r3, [pc, #140]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	429a      	cmp	r2, r3
 800438e:	d802      	bhi.n	8004396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004390:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <prvAddNewTaskToReadyList+0xd0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3301      	adds	r3, #1
 800439c:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <prvAddNewTaskToReadyList+0xd0>)
 800439e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <prvAddNewTaskToReadyList+0xd0>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <prvAddNewTaskToReadyList+0xd4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d903      	bls.n	80043bc <prvAddNewTaskToReadyList+0x74>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <prvAddNewTaskToReadyList+0xd4>)
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4a15      	ldr	r2, [pc, #84]	; (8004420 <prvAddNewTaskToReadyList+0xd8>)
 80043ca:	441a      	add	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f7ff f8fc 	bl	80035d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043d8:	f001 fab4 	bl	8005944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <prvAddNewTaskToReadyList+0xcc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00e      	beq.n	8004402 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <prvAddNewTaskToReadyList+0xc8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d207      	bcs.n	8004402 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <prvAddNewTaskToReadyList+0xdc>)
 80043f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000dcc 	.word	0x20000dcc
 8004410:	200008f8 	.word	0x200008f8
 8004414:	20000dd8 	.word	0x20000dd8
 8004418:	20000de8 	.word	0x20000de8
 800441c:	20000dd4 	.word	0x20000dd4
 8004420:	200008fc 	.word	0x200008fc
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <vTaskDelay+0x60>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <vTaskDelay+0x30>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60bb      	str	r3, [r7, #8]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004458:	f000 f900 	bl	800465c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800445c:	2100      	movs	r1, #0
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fd74 	bl	8004f4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004464:	f000 f908 	bl	8004678 <xTaskResumeAll>
 8004468:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <vTaskDelay+0x64>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000df4 	.word	0x20000df4
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004498:	f001 fa24 	bl	80058e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <vTaskSuspend+0x18>
 80044a2:	4b30      	ldr	r3, [pc, #192]	; (8004564 <vTaskSuspend+0xd4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	e000      	b.n	80044aa <vTaskSuspend+0x1a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f8ea 	bl	800368a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3318      	adds	r3, #24
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff f8e1 	bl	800368a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4619      	mov	r1, r3
 80044ce:	4826      	ldr	r0, [pc, #152]	; (8004568 <vTaskSuspend+0xd8>)
 80044d0:	f7ff f87e 	bl	80035d0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d103      	bne.n	80044e8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80044e8:	f001 fa2c 	bl	8005944 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80044ec:	4b1f      	ldr	r3, [pc, #124]	; (800456c <vTaskSuspend+0xdc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80044f4:	f001 f9f6 	bl	80058e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80044f8:	f000 fc7c 	bl	8004df4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80044fc:	f001 fa22 	bl	8005944 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004500:	4b18      	ldr	r3, [pc, #96]	; (8004564 <vTaskSuspend+0xd4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	429a      	cmp	r2, r3
 8004508:	d127      	bne.n	800455a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <vTaskSuspend+0xdc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d017      	beq.n	8004542 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <vTaskSuspend+0xe0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <vTaskSuspend+0xa0>
	__asm volatile
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	60bb      	str	r3, [r7, #8]
}
 800452c:	bf00      	nop
 800452e:	e7fe      	b.n	800452e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8004530:	4b10      	ldr	r3, [pc, #64]	; (8004574 <vTaskSuspend+0xe4>)
 8004532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004540:	e00b      	b.n	800455a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <vTaskSuspend+0xd8>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <vTaskSuspend+0xe8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d103      	bne.n	8004556 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <vTaskSuspend+0xd4>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
	}
 8004554:	e001      	b.n	800455a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8004556:	f000 f9f7 	bl	8004948 <vTaskSwitchContext>
	}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	200008f8 	.word	0x200008f8
 8004568:	20000db8 	.word	0x20000db8
 800456c:	20000dd8 	.word	0x20000dd8
 8004570:	20000df4 	.word	0x20000df4
 8004574:	e000ed04 	.word	0xe000ed04
 8004578:	20000dcc 	.word	0x20000dcc

0800457c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800458a:	463a      	mov	r2, r7
 800458c:	1d39      	adds	r1, r7, #4
 800458e:	f107 0308 	add.w	r3, r7, #8
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe ff6a 	bl	800346c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	9202      	str	r2, [sp, #8]
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	460a      	mov	r2, r1
 80045aa:	4924      	ldr	r1, [pc, #144]	; (800463c <vTaskStartScheduler+0xc0>)
 80045ac:	4824      	ldr	r0, [pc, #144]	; (8004640 <vTaskStartScheduler+0xc4>)
 80045ae:	f7ff fd83 	bl	80040b8 <xTaskCreateStatic>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4a23      	ldr	r2, [pc, #140]	; (8004644 <vTaskStartScheduler+0xc8>)
 80045b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045b8:	4b22      	ldr	r3, [pc, #136]	; (8004644 <vTaskStartScheduler+0xc8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e001      	b.n	80045ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d102      	bne.n	80045d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045d0:	f000 fd10 	bl	8004ff4 <xTimerCreateTimerTask>
 80045d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d11b      	bne.n	8004614 <vTaskStartScheduler+0x98>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	613b      	str	r3, [r7, #16]
}
 80045ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <vTaskStartScheduler+0xcc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3354      	adds	r3, #84	; 0x54
 80045f6:	4a15      	ldr	r2, [pc, #84]	; (800464c <vTaskStartScheduler+0xd0>)
 80045f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <vTaskStartScheduler+0xd4>)
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <vTaskStartScheduler+0xd8>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <vTaskStartScheduler+0xdc>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800460e:	f001 f8c7 	bl	80057a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004612:	e00e      	b.n	8004632 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d10a      	bne.n	8004632 <vTaskStartScheduler+0xb6>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <vTaskStartScheduler+0xb4>
}
 8004632:	bf00      	nop
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	08006104 	.word	0x08006104
 8004640:	08004c81 	.word	0x08004c81
 8004644:	20000df0 	.word	0x20000df0
 8004648:	200008f8 	.word	0x200008f8
 800464c:	2000005c 	.word	0x2000005c
 8004650:	20000dec 	.word	0x20000dec
 8004654:	20000dd8 	.word	0x20000dd8
 8004658:	20000dd0 	.word	0x20000dd0

0800465c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <vTaskSuspendAll+0x18>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3301      	adds	r3, #1
 8004666:	4a03      	ldr	r2, [pc, #12]	; (8004674 <vTaskSuspendAll+0x18>)
 8004668:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800466a:	bf00      	nop
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	20000df4 	.word	0x20000df4

08004678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004686:	4b42      	ldr	r3, [pc, #264]	; (8004790 <xTaskResumeAll+0x118>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	603b      	str	r3, [r7, #0]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046a4:	f001 f91e 	bl	80058e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046a8:	4b39      	ldr	r3, [pc, #228]	; (8004790 <xTaskResumeAll+0x118>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	4a38      	ldr	r2, [pc, #224]	; (8004790 <xTaskResumeAll+0x118>)
 80046b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <xTaskResumeAll+0x118>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d162      	bne.n	8004780 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <xTaskResumeAll+0x11c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d05e      	beq.n	8004780 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c2:	e02f      	b.n	8004724 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c4:	4b34      	ldr	r3, [pc, #208]	; (8004798 <xTaskResumeAll+0x120>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3318      	adds	r3, #24
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe ffda 	bl	800368a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3304      	adds	r3, #4
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe ffd5 	bl	800368a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b2d      	ldr	r3, [pc, #180]	; (800479c <xTaskResumeAll+0x124>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d903      	bls.n	80046f4 <xTaskResumeAll+0x7c>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <xTaskResumeAll+0x124>)
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <xTaskResumeAll+0x128>)
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7fe ff60 	bl	80035d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004714:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <xTaskResumeAll+0x12c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800471e:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <xTaskResumeAll+0x130>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004724:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <xTaskResumeAll+0x120>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1cb      	bne.n	80046c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004732:	f000 fb5f 	bl	8004df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <xTaskResumeAll+0x134>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004742:	f000 f847 	bl	80047d4 <xTaskIncrementTick>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <xTaskResumeAll+0x130>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3b01      	subs	r3, #1
 8004756:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f1      	bne.n	8004742 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <xTaskResumeAll+0x134>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004764:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <xTaskResumeAll+0x130>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800476c:	2301      	movs	r3, #1
 800476e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <xTaskResumeAll+0x138>)
 8004772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004780:	f001 f8e0 	bl	8005944 <vPortExitCritical>

	return xAlreadyYielded;
 8004784:	68bb      	ldr	r3, [r7, #8]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000df4 	.word	0x20000df4
 8004794:	20000dcc 	.word	0x20000dcc
 8004798:	20000d8c 	.word	0x20000d8c
 800479c:	20000dd4 	.word	0x20000dd4
 80047a0:	200008fc 	.word	0x200008fc
 80047a4:	200008f8 	.word	0x200008f8
 80047a8:	20000de0 	.word	0x20000de0
 80047ac:	20000ddc 	.word	0x20000ddc
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <xTaskGetTickCount+0x1c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047c0:	687b      	ldr	r3, [r7, #4]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000dd0 	.word	0x20000dd0

080047d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047de:	4b4f      	ldr	r3, [pc, #316]	; (800491c <xTaskIncrementTick+0x148>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 808f 	bne.w	8004906 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047e8:	4b4d      	ldr	r3, [pc, #308]	; (8004920 <xTaskIncrementTick+0x14c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047f0:	4a4b      	ldr	r2, [pc, #300]	; (8004920 <xTaskIncrementTick+0x14c>)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d120      	bne.n	800483e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047fc:	4b49      	ldr	r3, [pc, #292]	; (8004924 <xTaskIncrementTick+0x150>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <xTaskIncrementTick+0x48>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	603b      	str	r3, [r7, #0]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <xTaskIncrementTick+0x46>
 800481c:	4b41      	ldr	r3, [pc, #260]	; (8004924 <xTaskIncrementTick+0x150>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	4b41      	ldr	r3, [pc, #260]	; (8004928 <xTaskIncrementTick+0x154>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a3f      	ldr	r2, [pc, #252]	; (8004924 <xTaskIncrementTick+0x150>)
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4a3f      	ldr	r2, [pc, #252]	; (8004928 <xTaskIncrementTick+0x154>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b3e      	ldr	r3, [pc, #248]	; (800492c <xTaskIncrementTick+0x158>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a3d      	ldr	r2, [pc, #244]	; (800492c <xTaskIncrementTick+0x158>)
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	f000 fadb 	bl	8004df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <xTaskIncrementTick+0x15c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d349      	bcc.n	80048dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <xTaskIncrementTick+0x150>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d104      	bne.n	800485c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <xTaskIncrementTick+0x15c>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	601a      	str	r2, [r3, #0]
					break;
 800485a:	e03f      	b.n	80048dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485c:	4b31      	ldr	r3, [pc, #196]	; (8004924 <xTaskIncrementTick+0x150>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	d203      	bcs.n	800487c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004874:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <xTaskIncrementTick+0x15c>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800487a:	e02f      	b.n	80048dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	3304      	adds	r3, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe ff02 	bl	800368a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d004      	beq.n	8004898 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3318      	adds	r3, #24
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fef9 	bl	800368a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	4b25      	ldr	r3, [pc, #148]	; (8004934 <xTaskIncrementTick+0x160>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <xTaskIncrementTick+0xd8>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <xTaskIncrementTick+0x160>)
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <xTaskIncrementTick+0x164>)
 80048ba:	441a      	add	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f7fe fe84 	bl	80035d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <xTaskIncrementTick+0x168>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d3b8      	bcc.n	8004848 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048da:	e7b5      	b.n	8004848 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <xTaskIncrementTick+0x168>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	4915      	ldr	r1, [pc, #84]	; (8004938 <xTaskIncrementTick+0x164>)
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d901      	bls.n	80048f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048f8:	4b11      	ldr	r3, [pc, #68]	; (8004940 <xTaskIncrementTick+0x16c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e004      	b.n	8004910 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <xTaskIncrementTick+0x170>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <xTaskIncrementTick+0x170>)
 800490e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004910:	697b      	ldr	r3, [r7, #20]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000df4 	.word	0x20000df4
 8004920:	20000dd0 	.word	0x20000dd0
 8004924:	20000d84 	.word	0x20000d84
 8004928:	20000d88 	.word	0x20000d88
 800492c:	20000de4 	.word	0x20000de4
 8004930:	20000dec 	.word	0x20000dec
 8004934:	20000dd4 	.word	0x20000dd4
 8004938:	200008fc 	.word	0x200008fc
 800493c:	200008f8 	.word	0x200008f8
 8004940:	20000de0 	.word	0x20000de0
 8004944:	20000ddc 	.word	0x20000ddc

08004948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <vTaskSwitchContext+0xb0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <vTaskSwitchContext+0xb4>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800495c:	e046      	b.n	80049ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800495e:	4b27      	ldr	r3, [pc, #156]	; (80049fc <vTaskSwitchContext+0xb4>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004964:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <vTaskSwitchContext+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e010      	b.n	800498e <vTaskSwitchContext+0x46>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <vTaskSwitchContext+0x40>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vTaskSwitchContext+0x3e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b01      	subs	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	491d      	ldr	r1, [pc, #116]	; (8004a04 <vTaskSwitchContext+0xbc>)
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0e4      	beq.n	800496c <vTaskSwitchContext+0x24>
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <vTaskSwitchContext+0xbc>)
 80049ae:	4413      	add	r3, r2
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	3308      	adds	r3, #8
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d104      	bne.n	80049d2 <vTaskSwitchContext+0x8a>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <vTaskSwitchContext+0xc0>)
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <vTaskSwitchContext+0xb8>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <vTaskSwitchContext+0xc0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3354      	adds	r3, #84	; 0x54
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <vTaskSwitchContext+0xc4>)
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	20000df4 	.word	0x20000df4
 80049fc:	20000de0 	.word	0x20000de0
 8004a00:	20000dd4 	.word	0x20000dd4
 8004a04:	200008fc 	.word	0x200008fc
 8004a08:	200008f8 	.word	0x200008f8
 8004a0c:	2000005c 	.word	0x2000005c

08004a10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	60fb      	str	r3, [r7, #12]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <vTaskPlaceOnEventList+0x44>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3318      	adds	r3, #24
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe fdea 	bl	8003618 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a44:	2101      	movs	r1, #1
 8004a46:	6838      	ldr	r0, [r7, #0]
 8004a48:	f000 fa80 	bl	8004f4c <prvAddCurrentTaskToDelayedList>
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200008f8 	.word	0x200008f8

08004a58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	617b      	str	r3, [r7, #20]
}
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <vTaskPlaceOnEventListRestricted+0x54>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3318      	adds	r3, #24
 8004a86:	4619      	mov	r1, r3
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7fe fda1 	bl	80035d0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	68b8      	ldr	r0, [r7, #8]
 8004a9e:	f000 fa55 	bl	8004f4c <prvAddCurrentTaskToDelayedList>
	}
 8004aa2:	bf00      	nop
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200008f8 	.word	0x200008f8

08004ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60fb      	str	r3, [r7, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	3318      	adds	r3, #24
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fdd2 	bl	800368a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <xTaskRemoveFromEventList+0xb0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11d      	bne.n	8004b2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fdc9 	bl	800368a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <xTaskRemoveFromEventList+0xb4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d903      	bls.n	8004b0c <xTaskRemoveFromEventList+0x5c>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a16      	ldr	r2, [pc, #88]	; (8004b64 <xTaskRemoveFromEventList+0xb4>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <xTaskRemoveFromEventList+0xb8>)
 8004b1a:	441a      	add	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f7fe fd54 	bl	80035d0 <vListInsertEnd>
 8004b28:	e005      	b.n	8004b36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3318      	adds	r3, #24
 8004b2e:	4619      	mov	r1, r3
 8004b30:	480e      	ldr	r0, [pc, #56]	; (8004b6c <xTaskRemoveFromEventList+0xbc>)
 8004b32:	f7fe fd4d 	bl	80035d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <xTaskRemoveFromEventList+0xc0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d905      	bls.n	8004b50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <xTaskRemoveFromEventList+0xc4>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e001      	b.n	8004b54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b54:	697b      	ldr	r3, [r7, #20]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000df4 	.word	0x20000df4
 8004b64:	20000dd4 	.word	0x20000dd4
 8004b68:	200008fc 	.word	0x200008fc
 8004b6c:	20000d8c 	.word	0x20000d8c
 8004b70:	200008f8 	.word	0x200008f8
 8004b74:	20000de0 	.word	0x20000de0

08004b78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <vTaskInternalSetTimeOutState+0x24>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <vTaskInternalSetTimeOutState+0x28>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	605a      	str	r2, [r3, #4]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000de4 	.word	0x20000de4
 8004ba0:	20000dd0 	.word	0x20000dd0

08004ba4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	613b      	str	r3, [r7, #16]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004be6:	f000 fe7d 	bl	80058e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bea:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <xTaskCheckForTimeOut+0xbc>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d102      	bne.n	8004c0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	e023      	b.n	8004c52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <xTaskCheckForTimeOut+0xc0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d007      	beq.n	8004c26 <xTaskCheckForTimeOut+0x82>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	e015      	b.n	8004c52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d20b      	bcs.n	8004c48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad2      	subs	r2, r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff9b 	bl	8004b78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e004      	b.n	8004c52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f000 fe77 	bl	8005944 <vPortExitCritical>

	return xReturn;
 8004c56:	69fb      	ldr	r3, [r7, #28]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000dd0 	.word	0x20000dd0
 8004c64:	20000de4 	.word	0x20000de4

08004c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <vTaskMissedYield+0x14>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
}
 8004c72:	bf00      	nop
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	20000de0 	.word	0x20000de0

08004c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c88:	f000 f852 	bl	8004d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <prvIdleTask+0x28>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d9f9      	bls.n	8004c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <prvIdleTask+0x2c>)
 8004c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ca4:	e7f0      	b.n	8004c88 <prvIdleTask+0x8>
 8004ca6:	bf00      	nop
 8004ca8:	200008fc 	.word	0x200008fc
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	e00c      	b.n	8004cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <prvInitialiseTaskLists+0x60>)
 8004cc8:	4413      	add	r3, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fc53 	bl	8003576 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b37      	cmp	r3, #55	; 0x37
 8004cda:	d9ef      	bls.n	8004cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cdc:	480d      	ldr	r0, [pc, #52]	; (8004d14 <prvInitialiseTaskLists+0x64>)
 8004cde:	f7fe fc4a 	bl	8003576 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ce2:	480d      	ldr	r0, [pc, #52]	; (8004d18 <prvInitialiseTaskLists+0x68>)
 8004ce4:	f7fe fc47 	bl	8003576 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ce8:	480c      	ldr	r0, [pc, #48]	; (8004d1c <prvInitialiseTaskLists+0x6c>)
 8004cea:	f7fe fc44 	bl	8003576 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cee:	480c      	ldr	r0, [pc, #48]	; (8004d20 <prvInitialiseTaskLists+0x70>)
 8004cf0:	f7fe fc41 	bl	8003576 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cf4:	480b      	ldr	r0, [pc, #44]	; (8004d24 <prvInitialiseTaskLists+0x74>)
 8004cf6:	f7fe fc3e 	bl	8003576 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <prvInitialiseTaskLists+0x78>)
 8004cfc:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <prvInitialiseTaskLists+0x64>)
 8004cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <prvInitialiseTaskLists+0x7c>)
 8004d02:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <prvInitialiseTaskLists+0x68>)
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	200008fc 	.word	0x200008fc
 8004d14:	20000d5c 	.word	0x20000d5c
 8004d18:	20000d70 	.word	0x20000d70
 8004d1c:	20000d8c 	.word	0x20000d8c
 8004d20:	20000da0 	.word	0x20000da0
 8004d24:	20000db8 	.word	0x20000db8
 8004d28:	20000d84 	.word	0x20000d84
 8004d2c:	20000d88 	.word	0x20000d88

08004d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d36:	e019      	b.n	8004d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d38:	f000 fdd4 	bl	80058e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3c:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <prvCheckTasksWaitingTermination+0x50>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe fc9e 	bl	800368a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <prvCheckTasksWaitingTermination+0x54>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <prvCheckTasksWaitingTermination+0x54>)
 8004d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <prvCheckTasksWaitingTermination+0x58>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <prvCheckTasksWaitingTermination+0x58>)
 8004d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d62:	f000 fdef 	bl	8005944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f810 	bl	8004d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <prvCheckTasksWaitingTermination+0x58>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e1      	bne.n	8004d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000da0 	.word	0x20000da0
 8004d84:	20000dcc 	.word	0x20000dcc
 8004d88:	20000db4 	.word	0x20000db4

08004d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3354      	adds	r3, #84	; 0x54
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 f8b7 	bl	8005f0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d108      	bne.n	8004dba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 ff87 	bl	8005cc0 <vPortFree>
				vPortFree( pxTCB );
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 ff84 	bl	8005cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db8:	e018      	b.n	8004dec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d103      	bne.n	8004dcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 ff7b 	bl	8005cc0 <vPortFree>
	}
 8004dca:	e00f      	b.n	8004dec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d00a      	beq.n	8004dec <prvDeleteTCB+0x60>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	60fb      	str	r3, [r7, #12]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <prvDeleteTCB+0x5e>
	}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e0c:	e008      	b.n	8004e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000d84 	.word	0x20000d84
 8004e30:	20000dec 	.word	0x20000dec

08004e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <xTaskGetSchedulerState+0x34>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e42:	2301      	movs	r3, #1
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e008      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e48:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <xTaskGetSchedulerState+0x38>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e50:	2302      	movs	r3, #2
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e001      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e5a:	687b      	ldr	r3, [r7, #4]
	}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	20000dd8 	.word	0x20000dd8
 8004e6c:	20000df4 	.word	0x20000df4

08004e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d056      	beq.n	8004f34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e86:	4b2e      	ldr	r3, [pc, #184]	; (8004f40 <xTaskPriorityDisinherit+0xd0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d00a      	beq.n	8004ea6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	60bb      	str	r3, [r7, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d02c      	beq.n	8004f34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d128      	bne.n	8004f34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fbcf 	bl	800368a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <xTaskPriorityDisinherit+0xd4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d903      	bls.n	8004f14 <xTaskPriorityDisinherit+0xa4>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <xTaskPriorityDisinherit+0xd4>)
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <xTaskPriorityDisinherit+0xd8>)
 8004f22:	441a      	add	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fe fb50 	bl	80035d0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f30:	2301      	movs	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f34:	697b      	ldr	r3, [r7, #20]
	}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	200008f8 	.word	0x200008f8
 8004f44:	20000dd4 	.word	0x20000dd4
 8004f48:	200008fc 	.word	0x200008fc

08004f4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f56:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <prvAddCurrentTaskToDelayedList+0x90>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f5c:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3304      	adds	r3, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fb91 	bl	800368a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d10a      	bne.n	8004f86 <prvAddCurrentTaskToDelayedList+0x3a>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4819      	ldr	r0, [pc, #100]	; (8004fe4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f80:	f7fe fb26 	bl	80035d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f84:	e026      	b.n	8004fd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f8e:	4b14      	ldr	r3, [pc, #80]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d209      	bcs.n	8004fb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fe fb34 	bl	8003618 <vListInsert>
}
 8004fb0:	e010      	b.n	8004fd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb2:	4b0e      	ldr	r3, [pc, #56]	; (8004fec <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f7fe fb2a 	bl	8003618 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d202      	bcs.n	8004fd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fce:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6013      	str	r3, [r2, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000dd0 	.word	0x20000dd0
 8004fe0:	200008f8 	.word	0x200008f8
 8004fe4:	20000db8 	.word	0x20000db8
 8004fe8:	20000d88 	.word	0x20000d88
 8004fec:	20000d84 	.word	0x20000d84
 8004ff0:	20000dec 	.word	0x20000dec

08004ff4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ffe:	f000 fb07 	bl	8005610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <xTimerCreateTimerTask+0x80>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d021      	beq.n	800504e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005012:	1d3a      	adds	r2, r7, #4
 8005014:	f107 0108 	add.w	r1, r7, #8
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fa3f 	bl	80034a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	2302      	movs	r3, #2
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	460a      	mov	r2, r1
 8005034:	4910      	ldr	r1, [pc, #64]	; (8005078 <xTimerCreateTimerTask+0x84>)
 8005036:	4811      	ldr	r0, [pc, #68]	; (800507c <xTimerCreateTimerTask+0x88>)
 8005038:	f7ff f83e 	bl	80040b8 <xTaskCreateStatic>
 800503c:	4603      	mov	r3, r0
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <xTimerCreateTimerTask+0x8c>)
 8005040:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005042:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <xTimerCreateTimerTask+0x8c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800504a:	2301      	movs	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	613b      	str	r3, [r7, #16]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800506a:	697b      	ldr	r3, [r7, #20]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000e28 	.word	0x20000e28
 8005078:	0800610c 	.word	0x0800610c
 800507c:	080051b9 	.word	0x080051b9
 8005080:	20000e2c 	.word	0x20000e2c

08005084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005092:	2300      	movs	r3, #0
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	623b      	str	r3, [r7, #32]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050b2:	4b1a      	ldr	r3, [pc, #104]	; (800511c <xTimerGenericCommand+0x98>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02a      	beq.n	8005110 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b05      	cmp	r3, #5
 80050ca:	dc18      	bgt.n	80050fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050cc:	f7ff feb2 	bl	8004e34 <xTaskGetSchedulerState>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d109      	bne.n	80050ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <xTimerGenericCommand+0x98>)
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	f107 0110 	add.w	r1, r7, #16
 80050de:	2300      	movs	r3, #0
 80050e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e2:	f7fe fc01 	bl	80038e8 <xQueueGenericSend>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24
 80050e8:	e012      	b.n	8005110 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050ea:	4b0c      	ldr	r3, [pc, #48]	; (800511c <xTimerGenericCommand+0x98>)
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f107 0110 	add.w	r1, r7, #16
 80050f2:	2300      	movs	r3, #0
 80050f4:	2200      	movs	r2, #0
 80050f6:	f7fe fbf7 	bl	80038e8 <xQueueGenericSend>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24
 80050fc:	e008      	b.n	8005110 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <xTimerGenericCommand+0x98>)
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f107 0110 	add.w	r1, r7, #16
 8005106:	2300      	movs	r3, #0
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	f7fe fceb 	bl	8003ae4 <xQueueGenericSendFromISR>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005112:	4618      	mov	r0, r3
 8005114:	3728      	adds	r7, #40	; 0x28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000e28 	.word	0x20000e28

08005120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <prvProcessExpiredTimer+0x94>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3304      	adds	r3, #4
 8005138:	4618      	mov	r0, r3
 800513a:	f7fe faa6 	bl	800368a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	d022      	beq.n	8005192 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	18d1      	adds	r1, r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	6978      	ldr	r0, [r7, #20]
 800515a:	f000 f8d1 	bl	8005300 <prvInsertTimerInActiveList>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01f      	beq.n	80051a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005164:	2300      	movs	r3, #0
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	2300      	movs	r3, #0
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	2100      	movs	r1, #0
 800516e:	6978      	ldr	r0, [r7, #20]
 8005170:	f7ff ff88 	bl	8005084 <xTimerGenericCommand>
 8005174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d113      	bne.n	80051a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	60fb      	str	r3, [r7, #12]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	b2da      	uxtb	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	6978      	ldr	r0, [r7, #20]
 80051aa:	4798      	blx	r3
}
 80051ac:	bf00      	nop
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000e20 	.word	0x20000e20

080051b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f857 	bl	8005278 <prvGetNextExpireTime>
 80051ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4619      	mov	r1, r3
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f803 	bl	80051dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051d6:	f000 f8d5 	bl	8005384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051da:	e7f1      	b.n	80051c0 <prvTimerTask+0x8>

080051dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051e6:	f7ff fa39 	bl	800465c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f866 	bl	80052c0 <prvSampleTimeNow>
 80051f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d130      	bne.n	800525e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <prvProcessTimerOrBlockTask+0x3c>
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	429a      	cmp	r2, r3
 8005208:	d806      	bhi.n	8005218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800520a:	f7ff fa35 	bl	8004678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ff85 	bl	8005120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005216:	e024      	b.n	8005262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <prvProcessTimerOrBlockTask+0x90>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <prvProcessTimerOrBlockTask+0x50>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <prvProcessTimerOrBlockTask+0x52>
 800522c:	2300      	movs	r3, #0
 800522e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <prvProcessTimerOrBlockTask+0x94>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	4619      	mov	r1, r3
 800523e:	f7fe ff07 	bl	8004050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005242:	f7ff fa19 	bl	8004678 <xTaskResumeAll>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <prvProcessTimerOrBlockTask+0x98>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	f3bf 8f6f 	isb	sy
}
 800525c:	e001      	b.n	8005262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800525e:	f7ff fa0b 	bl	8004678 <xTaskResumeAll>
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000e24 	.word	0x20000e24
 8005270:	20000e28 	.word	0x20000e28
 8005274:	e000ed04 	.word	0xe000ed04

08005278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005280:	4b0e      	ldr	r3, [pc, #56]	; (80052bc <prvGetNextExpireTime+0x44>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <prvGetNextExpireTime+0x16>
 800528a:	2201      	movs	r2, #1
 800528c:	e000      	b.n	8005290 <prvGetNextExpireTime+0x18>
 800528e:	2200      	movs	r2, #0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800529c:	4b07      	ldr	r3, [pc, #28]	; (80052bc <prvGetNextExpireTime+0x44>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e001      	b.n	80052ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000e20 	.word	0x20000e20

080052c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052c8:	f7ff fa74 	bl	80047b4 <xTaskGetTickCount>
 80052cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052ce:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <prvSampleTimeNow+0x3c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d205      	bcs.n	80052e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052d8:	f000 f936 	bl	8005548 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e002      	b.n	80052ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052ea:	4a04      	ldr	r2, [pc, #16]	; (80052fc <prvSampleTimeNow+0x3c>)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000e30 	.word	0x20000e30

08005300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d812      	bhi.n	800534c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	429a      	cmp	r2, r3
 8005332:	d302      	bcc.n	800533a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e01b      	b.n	8005372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <prvInsertTimerInActiveList+0x7c>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3304      	adds	r3, #4
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f7fe f967 	bl	8003618 <vListInsert>
 800534a:	e012      	b.n	8005372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d206      	bcs.n	8005362 <prvInsertTimerInActiveList+0x62>
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d302      	bcc.n	8005362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e007      	b.n	8005372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <prvInsertTimerInActiveList+0x80>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3304      	adds	r3, #4
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f7fe f953 	bl	8003618 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005372:	697b      	ldr	r3, [r7, #20]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20000e24 	.word	0x20000e24
 8005380:	20000e20 	.word	0x20000e20

08005384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08e      	sub	sp, #56	; 0x38
 8005388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800538a:	e0ca      	b.n	8005522 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	da18      	bge.n	80053c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005392:	1d3b      	adds	r3, r7, #4
 8005394:	3304      	adds	r3, #4
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	61fb      	str	r3, [r7, #28]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ba:	6850      	ldr	r0, [r2, #4]
 80053bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053be:	6892      	ldr	r2, [r2, #8]
 80053c0:	4611      	mov	r1, r2
 80053c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f2c0 80ab 	blt.w	8005522 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	3304      	adds	r3, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe f954 	bl	800368a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053e2:	463b      	mov	r3, r7
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff ff6b 	bl	80052c0 <prvSampleTimeNow>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b09      	cmp	r3, #9
 80053f0:	f200 8096 	bhi.w	8005520 <prvProcessReceivedCommands+0x19c>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <prvProcessReceivedCommands+0x78>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005425 	.word	0x08005425
 8005400:	08005425 	.word	0x08005425
 8005404:	08005425 	.word	0x08005425
 8005408:	08005499 	.word	0x08005499
 800540c:	080054ad 	.word	0x080054ad
 8005410:	080054f7 	.word	0x080054f7
 8005414:	08005425 	.word	0x08005425
 8005418:	08005425 	.word	0x08005425
 800541c:	08005499 	.word	0x08005499
 8005420:	080054ad 	.word	0x080054ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	18d1      	adds	r1, r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005444:	f7ff ff5c 	bl	8005300 <prvInsertTimerInActiveList>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d069      	beq.n	8005522 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005454:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d05e      	beq.n	8005522 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	441a      	add	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	2300      	movs	r3, #0
 8005472:	2100      	movs	r1, #0
 8005474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005476:	f7ff fe05 	bl	8005084 <xTimerGenericCommand>
 800547a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d14f      	bne.n	8005522 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	61bb      	str	r3, [r7, #24]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80054aa:	e03a      	b.n	8005522 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	617b      	str	r3, [r7, #20]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	18d1      	adds	r1, r2, r3
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f0:	f7ff ff06 	bl	8005300 <prvInsertTimerInActiveList>
					break;
 80054f4:	e015      	b.n	8005522 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005506:	f000 fbdb 	bl	8005cc0 <vPortFree>
 800550a:	e00a      	b.n	8005522 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800551e:	e000      	b.n	8005522 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005520:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <prvProcessReceivedCommands+0x1c0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	1d39      	adds	r1, r7, #4
 8005528:	2200      	movs	r2, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f7fe fb76 	bl	8003c1c <xQueueReceive>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	f47f af2a 	bne.w	800538c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	3730      	adds	r7, #48	; 0x30
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000e28 	.word	0x20000e28

08005548 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800554e:	e048      	b.n	80055e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005550:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <prvSwitchTimerLists+0xc0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555a:	4b2b      	ldr	r3, [pc, #172]	; (8005608 <prvSwitchTimerLists+0xc0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe f88e 	bl	800368a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02e      	beq.n	80055e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4413      	add	r3, r2
 800558c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	d90e      	bls.n	80055b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055a2:	4b19      	ldr	r3, [pc, #100]	; (8005608 <prvSwitchTimerLists+0xc0>)
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f7fe f833 	bl	8003618 <vListInsert>
 80055b2:	e016      	b.n	80055e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	2100      	movs	r1, #0
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff fd60 	bl	8005084 <xTimerGenericCommand>
 80055c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	603b      	str	r3, [r7, #0]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <prvSwitchTimerLists+0xc0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1b1      	bne.n	8005550 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <prvSwitchTimerLists+0xc0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <prvSwitchTimerLists+0xc4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a04      	ldr	r2, [pc, #16]	; (8005608 <prvSwitchTimerLists+0xc0>)
 80055f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <prvSwitchTimerLists+0xc4>)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	6013      	str	r3, [r2, #0]
}
 8005600:	bf00      	nop
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000e20 	.word	0x20000e20
 800560c:	20000e24 	.word	0x20000e24

08005610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005616:	f000 f965 	bl	80058e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <prvCheckForValidListAndQueue+0x60>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d120      	bne.n	8005664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005622:	4814      	ldr	r0, [pc, #80]	; (8005674 <prvCheckForValidListAndQueue+0x64>)
 8005624:	f7fd ffa7 	bl	8003576 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005628:	4813      	ldr	r0, [pc, #76]	; (8005678 <prvCheckForValidListAndQueue+0x68>)
 800562a:	f7fd ffa4 	bl	8003576 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <prvCheckForValidListAndQueue+0x6c>)
 8005630:	4a10      	ldr	r2, [pc, #64]	; (8005674 <prvCheckForValidListAndQueue+0x64>)
 8005632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <prvCheckForValidListAndQueue+0x70>)
 8005636:	4a10      	ldr	r2, [pc, #64]	; (8005678 <prvCheckForValidListAndQueue+0x68>)
 8005638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800563a:	2300      	movs	r3, #0
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <prvCheckForValidListAndQueue+0x74>)
 8005640:	4a11      	ldr	r2, [pc, #68]	; (8005688 <prvCheckForValidListAndQueue+0x78>)
 8005642:	2110      	movs	r1, #16
 8005644:	200a      	movs	r0, #10
 8005646:	f7fe f8b3 	bl	80037b0 <xQueueGenericCreateStatic>
 800564a:	4603      	mov	r3, r0
 800564c:	4a08      	ldr	r2, [pc, #32]	; (8005670 <prvCheckForValidListAndQueue+0x60>)
 800564e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <prvCheckForValidListAndQueue+0x60>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <prvCheckForValidListAndQueue+0x60>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	490b      	ldr	r1, [pc, #44]	; (800568c <prvCheckForValidListAndQueue+0x7c>)
 800565e:	4618      	mov	r0, r3
 8005660:	f7fe fccc 	bl	8003ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005664:	f000 f96e 	bl	8005944 <vPortExitCritical>
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000e28 	.word	0x20000e28
 8005674:	20000df8 	.word	0x20000df8
 8005678:	20000e0c 	.word	0x20000e0c
 800567c:	20000e20 	.word	0x20000e20
 8005680:	20000e24 	.word	0x20000e24
 8005684:	20000ed4 	.word	0x20000ed4
 8005688:	20000e34 	.word	0x20000e34
 800568c:	08006114 	.word	0x08006114

08005690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3b04      	subs	r3, #4
 80056a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3b04      	subs	r3, #4
 80056ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f023 0201 	bic.w	r2, r3, #1
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3b04      	subs	r3, #4
 80056be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056c0:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <pxPortInitialiseStack+0x64>)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3b14      	subs	r3, #20
 80056ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3b04      	subs	r3, #4
 80056d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f06f 0202 	mvn.w	r2, #2
 80056de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b20      	subs	r3, #32
 80056e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056e6:	68fb      	ldr	r3, [r7, #12]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	080056f9 	.word	0x080056f9

080056f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <prvTaskExitError+0x54>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d00a      	beq.n	8005722 <prvTaskExitError+0x2a>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60fb      	str	r3, [r7, #12]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <prvTaskExitError+0x28>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60bb      	str	r3, [r7, #8]
}
 8005734:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005736:	bf00      	nop
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0fc      	beq.n	8005738 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800573e:	bf00      	nop
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	2000000c 	.word	0x2000000c

08005750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005778:	4808      	ldr	r0, [pc, #32]	; (800579c <prvPortStartFirstTask+0x24>)
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f380 8808 	msr	MSP, r0
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8814 	msr	CONTROL, r0
 800578a:	b662      	cpsie	i
 800578c:	b661      	cpsie	f
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	df00      	svc	0
 8005798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800579a:	bf00      	nop
 800579c:	e000ed08 	.word	0xe000ed08

080057a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057a6:	4b46      	ldr	r3, [pc, #280]	; (80058c0 <xPortStartScheduler+0x120>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a46      	ldr	r2, [pc, #280]	; (80058c4 <xPortStartScheduler+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10a      	bne.n	80057c6 <xPortStartScheduler+0x26>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	613b      	str	r3, [r7, #16]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057c6:	4b3e      	ldr	r3, [pc, #248]	; (80058c0 <xPortStartScheduler+0x120>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3f      	ldr	r2, [pc, #252]	; (80058c8 <xPortStartScheduler+0x128>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10a      	bne.n	80057e6 <xPortStartScheduler+0x46>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057e6:	4b39      	ldr	r3, [pc, #228]	; (80058cc <xPortStartScheduler+0x12c>)
 80057e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	22ff      	movs	r2, #255	; 0xff
 80057f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005808:	b2da      	uxtb	r2, r3
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <xPortStartScheduler+0x130>)
 800580c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800580e:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <xPortStartScheduler+0x134>)
 8005810:	2207      	movs	r2, #7
 8005812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005814:	e009      	b.n	800582a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <xPortStartScheduler+0x134>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <xPortStartScheduler+0x134>)
 800581e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d0ef      	beq.n	8005816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005836:	4b27      	ldr	r3, [pc, #156]	; (80058d4 <xPortStartScheduler+0x134>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1c3 0307 	rsb	r3, r3, #7
 800583e:	2b04      	cmp	r3, #4
 8005840:	d00a      	beq.n	8005858 <xPortStartScheduler+0xb8>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	60bb      	str	r3, [r7, #8]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <xPortStartScheduler+0x134>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <xPortStartScheduler+0x134>)
 8005860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005862:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <xPortStartScheduler+0x134>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800586a:	4a1a      	ldr	r2, [pc, #104]	; (80058d4 <xPortStartScheduler+0x134>)
 800586c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	b2da      	uxtb	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005876:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <xPortStartScheduler+0x138>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <xPortStartScheduler+0x138>)
 800587c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <xPortStartScheduler+0x138>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a14      	ldr	r2, [pc, #80]	; (80058d8 <xPortStartScheduler+0x138>)
 8005888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800588c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800588e:	f000 f8dd 	bl	8005a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <xPortStartScheduler+0x13c>)
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005898:	f000 f8fc 	bl	8005a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800589c:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <xPortStartScheduler+0x140>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <xPortStartScheduler+0x140>)
 80058a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058a8:	f7ff ff66 	bl	8005778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058ac:	f7ff f84c 	bl	8004948 <vTaskSwitchContext>
	prvTaskExitError();
 80058b0:	f7ff ff22 	bl	80056f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	e000ed00 	.word	0xe000ed00
 80058c4:	410fc271 	.word	0x410fc271
 80058c8:	410fc270 	.word	0x410fc270
 80058cc:	e000e400 	.word	0xe000e400
 80058d0:	20000f24 	.word	0x20000f24
 80058d4:	20000f28 	.word	0x20000f28
 80058d8:	e000ed20 	.word	0xe000ed20
 80058dc:	2000000c 	.word	0x2000000c
 80058e0:	e000ef34 	.word	0xe000ef34

080058e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	607b      	str	r3, [r7, #4]
}
 80058fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <vPortEnterCritical+0x58>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <vPortEnterCritical+0x58>)
 8005906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <vPortEnterCritical+0x58>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d10f      	bne.n	8005930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortEnterCritical+0x5c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <vPortEnterCritical+0x4c>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	603b      	str	r3, [r7, #0]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <vPortEnterCritical+0x4a>
	}
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	2000000c 	.word	0x2000000c
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <vPortExitCritical+0x50>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <vPortExitCritical+0x24>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	607b      	str	r3, [r7, #4]
}
 8005964:	bf00      	nop
 8005966:	e7fe      	b.n	8005966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <vPortExitCritical+0x50>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3b01      	subs	r3, #1
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <vPortExitCritical+0x50>)
 8005970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <vPortExitCritical+0x50>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <vPortExitCritical+0x42>
 800597a:	2300      	movs	r3, #0
 800597c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f383 8811 	msr	BASEPRI, r3
}
 8005984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c
	...

080059a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059a0:	f3ef 8009 	mrs	r0, PSP
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <pxCurrentTCBConst>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f01e 0f10 	tst.w	lr, #16
 80059b0:	bf08      	it	eq
 80059b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059c4:	f380 8811 	msr	BASEPRI, r0
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f7fe ffba 	bl	8004948 <vTaskSwitchContext>
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f380 8811 	msr	BASEPRI, r0
 80059dc:	bc09      	pop	{r0, r3}
 80059de:	6819      	ldr	r1, [r3, #0]
 80059e0:	6808      	ldr	r0, [r1, #0]
 80059e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e6:	f01e 0f10 	tst.w	lr, #16
 80059ea:	bf08      	it	eq
 80059ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059f0:	f380 8809 	msr	PSP, r0
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst>:
 8005a00:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a22:	f7fe fed7 	bl	80047d4 <xTaskIncrementTick>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <xPortSysTickHandler+0x40>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	2300      	movs	r3, #0
 8005a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
}
 8005a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <vPortSetupTimerInterrupt+0x34>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <vPortSetupTimerInterrupt+0x38>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <vPortSetupTimerInterrupt+0x3c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <vPortSetupTimerInterrupt+0x40>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <vPortSetupTimerInterrupt+0x44>)
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a6e:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <vPortSetupTimerInterrupt+0x34>)
 8005a70:	2207      	movs	r2, #7
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	e000e010 	.word	0xe000e010
 8005a84:	e000e018 	.word	0xe000e018
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	10624dd3 	.word	0x10624dd3
 8005a90:	e000e014 	.word	0xe000e014

08005a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005aa4 <vPortEnableVFP+0x10>
 8005a98:	6801      	ldr	r1, [r0, #0]
 8005a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a9e:	6001      	str	r1, [r0, #0]
 8005aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005aa2:	bf00      	nop
 8005aa4:	e000ed88 	.word	0xe000ed88

08005aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005aae:	f3ef 8305 	mrs	r3, IPSR
 8005ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	d914      	bls.n	8005ae4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <vPortValidateInterruptPriority+0x70>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <vPortValidateInterruptPriority+0x74>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	7afa      	ldrb	r2, [r7, #11]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20a      	bcs.n	8005ae4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <vPortValidateInterruptPriority+0x78>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005aec:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <vPortValidateInterruptPriority+0x7c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d90a      	bls.n	8005b0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	603b      	str	r3, [r7, #0]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <vPortValidateInterruptPriority+0x60>
	}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	e000e3f0 	.word	0xe000e3f0
 8005b1c:	20000f24 	.word	0x20000f24
 8005b20:	e000ed0c 	.word	0xe000ed0c
 8005b24:	20000f28 	.word	0x20000f28

08005b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b34:	f7fe fd92 	bl	800465c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b38:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <pvPortMalloc+0x180>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b40:	f000 f920 	bl	8005d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <pvPortMalloc+0x184>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 8093 	bne.w	8005c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01d      	beq.n	8005b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b58:	2208      	movs	r2, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d014      	beq.n	8005b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <pvPortMalloc+0x6c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d06e      	beq.n	8005c78 <pvPortMalloc+0x150>
 8005b9a:	4b45      	ldr	r3, [pc, #276]	; (8005cb0 <pvPortMalloc+0x188>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d869      	bhi.n	8005c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ba4:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ba8:	4b42      	ldr	r3, [pc, #264]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bae:	e004      	b.n	8005bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <pvPortMalloc+0xa4>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bcc:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <pvPortMalloc+0x180>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d050      	beq.n	8005c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2208      	movs	r2, #8
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d91f      	bls.n	8005c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <pvPortMalloc+0xf8>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	613b      	str	r3, [r7, #16]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c32:	69b8      	ldr	r0, [r7, #24]
 8005c34:	f000 f908 	bl	8005e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d203      	bcs.n	8005c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <pvPortMalloc+0x184>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <pvPortMalloc+0x194>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <pvPortMalloc+0x194>)
 8005c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c78:	f7fe fcfe 	bl	8004678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <pvPortMalloc+0x174>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	60fb      	str	r3, [r7, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <pvPortMalloc+0x172>
	return pvReturn;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20004b34 	.word	0x20004b34
 8005cac:	20004b48 	.word	0x20004b48
 8005cb0:	20004b38 	.word	0x20004b38
 8005cb4:	20004b2c 	.word	0x20004b2c
 8005cb8:	20004b3c 	.word	0x20004b3c
 8005cbc:	20004b40 	.word	0x20004b40

08005cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04d      	beq.n	8005d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <vPortFree+0xb8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <vPortFree+0x44>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <vPortFree+0x62>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60bb      	str	r3, [r7, #8]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <vPortFree+0xb8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01e      	beq.n	8005d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11a      	bne.n	8005d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <vPortFree+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	401a      	ands	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d48:	f7fe fc88 	bl	800465c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <vPortFree+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <vPortFree+0xbc>)
 8005d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d5a:	6938      	ldr	r0, [r7, #16]
 8005d5c:	f000 f874 	bl	8005e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <vPortFree+0xc0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4a06      	ldr	r2, [pc, #24]	; (8005d80 <vPortFree+0xc0>)
 8005d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d6a:	f7fe fc85 	bl	8004678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20004b48 	.word	0x20004b48
 8005d7c:	20004b38 	.word	0x20004b38
 8005d80:	20004b44 	.word	0x20004b44

08005d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <prvHeapInit+0xac>)
 8005d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <prvHeapInit+0xac>)
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <prvHeapInit+0xb0>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <prvHeapInit+0xb0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <prvHeapInit+0xb4>)
 8005de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvHeapInit+0xb4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <prvHeapInit+0xb4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvHeapInit+0xb4>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <prvHeapInit+0xb8>)
 8005e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <prvHeapInit+0xbc>)
 8005e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <prvHeapInit+0xc0>)
 8005e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000f2c 	.word	0x20000f2c
 8005e34:	20004b2c 	.word	0x20004b2c
 8005e38:	20004b34 	.word	0x20004b34
 8005e3c:	20004b3c 	.word	0x20004b3c
 8005e40:	20004b38 	.word	0x20004b38
 8005e44:	20004b48 	.word	0x20004b48

08005e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e50:	4b28      	ldr	r3, [pc, #160]	; (8005ef4 <prvInsertBlockIntoFreeList+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e002      	b.n	8005e5c <prvInsertBlockIntoFreeList+0x14>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d8f7      	bhi.n	8005e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d108      	bne.n	8005e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d118      	bne.n	8005ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d00d      	beq.n	8005ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e008      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e003      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d002      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20004b2c 	.word	0x20004b2c
 8005ef8:	20004b34 	.word	0x20004b34

08005efc <memset>:
 8005efc:	4402      	add	r2, r0
 8005efe:	4603      	mov	r3, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <_reclaim_reent>:
 8005f0c:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <_reclaim_reent+0xa8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4283      	cmp	r3, r0
 8005f12:	b570      	push	{r4, r5, r6, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	d04b      	beq.n	8005fb0 <_reclaim_reent+0xa4>
 8005f18:	69c3      	ldr	r3, [r0, #28]
 8005f1a:	b143      	cbz	r3, 8005f2e <_reclaim_reent+0x22>
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d144      	bne.n	8005fac <_reclaim_reent+0xa0>
 8005f22:	69e3      	ldr	r3, [r4, #28]
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	b111      	cbz	r1, 8005f2e <_reclaim_reent+0x22>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 f879 	bl	8006020 <_free_r>
 8005f2e:	6961      	ldr	r1, [r4, #20]
 8005f30:	b111      	cbz	r1, 8005f38 <_reclaim_reent+0x2c>
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 f874 	bl	8006020 <_free_r>
 8005f38:	69e1      	ldr	r1, [r4, #28]
 8005f3a:	b111      	cbz	r1, 8005f42 <_reclaim_reent+0x36>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 f86f 	bl	8006020 <_free_r>
 8005f42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005f44:	b111      	cbz	r1, 8005f4c <_reclaim_reent+0x40>
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 f86a 	bl	8006020 <_free_r>
 8005f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f4e:	b111      	cbz	r1, 8005f56 <_reclaim_reent+0x4a>
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 f865 	bl	8006020 <_free_r>
 8005f56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f58:	b111      	cbz	r1, 8005f60 <_reclaim_reent+0x54>
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 f860 	bl	8006020 <_free_r>
 8005f60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f62:	b111      	cbz	r1, 8005f6a <_reclaim_reent+0x5e>
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 f85b 	bl	8006020 <_free_r>
 8005f6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005f6c:	b111      	cbz	r1, 8005f74 <_reclaim_reent+0x68>
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 f856 	bl	8006020 <_free_r>
 8005f74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f76:	b111      	cbz	r1, 8005f7e <_reclaim_reent+0x72>
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 f851 	bl	8006020 <_free_r>
 8005f7e:	6a23      	ldr	r3, [r4, #32]
 8005f80:	b1b3      	cbz	r3, 8005fb0 <_reclaim_reent+0xa4>
 8005f82:	4620      	mov	r0, r4
 8005f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f88:	4718      	bx	r3
 8005f8a:	5949      	ldr	r1, [r1, r5]
 8005f8c:	b941      	cbnz	r1, 8005fa0 <_reclaim_reent+0x94>
 8005f8e:	3504      	adds	r5, #4
 8005f90:	69e3      	ldr	r3, [r4, #28]
 8005f92:	2d80      	cmp	r5, #128	; 0x80
 8005f94:	68d9      	ldr	r1, [r3, #12]
 8005f96:	d1f8      	bne.n	8005f8a <_reclaim_reent+0x7e>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 f841 	bl	8006020 <_free_r>
 8005f9e:	e7c0      	b.n	8005f22 <_reclaim_reent+0x16>
 8005fa0:	680e      	ldr	r6, [r1, #0]
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f000 f83c 	bl	8006020 <_free_r>
 8005fa8:	4631      	mov	r1, r6
 8005faa:	e7ef      	b.n	8005f8c <_reclaim_reent+0x80>
 8005fac:	2500      	movs	r5, #0
 8005fae:	e7ef      	b.n	8005f90 <_reclaim_reent+0x84>
 8005fb0:	bd70      	pop	{r4, r5, r6, pc}
 8005fb2:	bf00      	nop
 8005fb4:	2000005c 	.word	0x2000005c

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	4d0d      	ldr	r5, [pc, #52]	; (8005ff0 <__libc_init_array+0x38>)
 8005fbc:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <__libc_init_array+0x3c>)
 8005fbe:	1b64      	subs	r4, r4, r5
 8005fc0:	10a4      	asrs	r4, r4, #2
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	d109      	bne.n	8005fdc <__libc_init_array+0x24>
 8005fc8:	4d0b      	ldr	r5, [pc, #44]	; (8005ff8 <__libc_init_array+0x40>)
 8005fca:	4c0c      	ldr	r4, [pc, #48]	; (8005ffc <__libc_init_array+0x44>)
 8005fcc:	f000 f880 	bl	80060d0 <_init>
 8005fd0:	1b64      	subs	r4, r4, r5
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	42a6      	cmp	r6, r4
 8005fd8:	d105      	bne.n	8005fe6 <__libc_init_array+0x2e>
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe0:	4798      	blx	r3
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7ee      	b.n	8005fc4 <__libc_init_array+0xc>
 8005fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fea:	4798      	blx	r3
 8005fec:	3601      	adds	r6, #1
 8005fee:	e7f2      	b.n	8005fd6 <__libc_init_array+0x1e>
 8005ff0:	08006194 	.word	0x08006194
 8005ff4:	08006194 	.word	0x08006194
 8005ff8:	08006194 	.word	0x08006194
 8005ffc:	08006198 	.word	0x08006198

08006000 <__retarget_lock_acquire_recursive>:
 8006000:	4770      	bx	lr

08006002 <__retarget_lock_release_recursive>:
 8006002:	4770      	bx	lr

08006004 <memcpy>:
 8006004:	440a      	add	r2, r1
 8006006:	4291      	cmp	r1, r2
 8006008:	f100 33ff 	add.w	r3, r0, #4294967295
 800600c:	d100      	bne.n	8006010 <memcpy+0xc>
 800600e:	4770      	bx	lr
 8006010:	b510      	push	{r4, lr}
 8006012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800601a:	4291      	cmp	r1, r2
 800601c:	d1f9      	bne.n	8006012 <memcpy+0xe>
 800601e:	bd10      	pop	{r4, pc}

08006020 <_free_r>:
 8006020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006022:	2900      	cmp	r1, #0
 8006024:	d044      	beq.n	80060b0 <_free_r+0x90>
 8006026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800602a:	9001      	str	r0, [sp, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f1a1 0404 	sub.w	r4, r1, #4
 8006032:	bfb8      	it	lt
 8006034:	18e4      	addlt	r4, r4, r3
 8006036:	f000 f83f 	bl	80060b8 <__malloc_lock>
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <_free_r+0x94>)
 800603c:	9801      	ldr	r0, [sp, #4]
 800603e:	6813      	ldr	r3, [r2, #0]
 8006040:	b933      	cbnz	r3, 8006050 <_free_r+0x30>
 8006042:	6063      	str	r3, [r4, #4]
 8006044:	6014      	str	r4, [r2, #0]
 8006046:	b003      	add	sp, #12
 8006048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800604c:	f000 b83a 	b.w	80060c4 <__malloc_unlock>
 8006050:	42a3      	cmp	r3, r4
 8006052:	d908      	bls.n	8006066 <_free_r+0x46>
 8006054:	6825      	ldr	r5, [r4, #0]
 8006056:	1961      	adds	r1, r4, r5
 8006058:	428b      	cmp	r3, r1
 800605a:	bf01      	itttt	eq
 800605c:	6819      	ldreq	r1, [r3, #0]
 800605e:	685b      	ldreq	r3, [r3, #4]
 8006060:	1949      	addeq	r1, r1, r5
 8006062:	6021      	streq	r1, [r4, #0]
 8006064:	e7ed      	b.n	8006042 <_free_r+0x22>
 8006066:	461a      	mov	r2, r3
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	b10b      	cbz	r3, 8006070 <_free_r+0x50>
 800606c:	42a3      	cmp	r3, r4
 800606e:	d9fa      	bls.n	8006066 <_free_r+0x46>
 8006070:	6811      	ldr	r1, [r2, #0]
 8006072:	1855      	adds	r5, r2, r1
 8006074:	42a5      	cmp	r5, r4
 8006076:	d10b      	bne.n	8006090 <_free_r+0x70>
 8006078:	6824      	ldr	r4, [r4, #0]
 800607a:	4421      	add	r1, r4
 800607c:	1854      	adds	r4, r2, r1
 800607e:	42a3      	cmp	r3, r4
 8006080:	6011      	str	r1, [r2, #0]
 8006082:	d1e0      	bne.n	8006046 <_free_r+0x26>
 8006084:	681c      	ldr	r4, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	6053      	str	r3, [r2, #4]
 800608a:	440c      	add	r4, r1
 800608c:	6014      	str	r4, [r2, #0]
 800608e:	e7da      	b.n	8006046 <_free_r+0x26>
 8006090:	d902      	bls.n	8006098 <_free_r+0x78>
 8006092:	230c      	movs	r3, #12
 8006094:	6003      	str	r3, [r0, #0]
 8006096:	e7d6      	b.n	8006046 <_free_r+0x26>
 8006098:	6825      	ldr	r5, [r4, #0]
 800609a:	1961      	adds	r1, r4, r5
 800609c:	428b      	cmp	r3, r1
 800609e:	bf04      	itt	eq
 80060a0:	6819      	ldreq	r1, [r3, #0]
 80060a2:	685b      	ldreq	r3, [r3, #4]
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	bf04      	itt	eq
 80060a8:	1949      	addeq	r1, r1, r5
 80060aa:	6021      	streq	r1, [r4, #0]
 80060ac:	6054      	str	r4, [r2, #4]
 80060ae:	e7ca      	b.n	8006046 <_free_r+0x26>
 80060b0:	b003      	add	sp, #12
 80060b2:	bd30      	pop	{r4, r5, pc}
 80060b4:	20004c88 	.word	0x20004c88

080060b8 <__malloc_lock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_lock+0x8>)
 80060ba:	f7ff bfa1 	b.w	8006000 <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	20004c84 	.word	0x20004c84

080060c4 <__malloc_unlock>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__malloc_unlock+0x8>)
 80060c6:	f7ff bf9c 	b.w	8006002 <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	20004c84 	.word	0x20004c84

080060d0 <_init>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	bf00      	nop
 80060d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d6:	bc08      	pop	{r3}
 80060d8:	469e      	mov	lr, r3
 80060da:	4770      	bx	lr

080060dc <_fini>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	bf00      	nop
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr
